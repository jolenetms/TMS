%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: C:\Users\ins4004\Documents\Projects\Response_Trajectories_Project\THREED_Data_Analyses\THREE-D HRSD_IDS_QIDS Total Data.csv
%
% Auto-generated by MATLAB on 17-Jan-2024 15:33:40

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 31, "Encoding", "UTF-8");

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["StudyID", "CONDITION", "HRSD_Tot_W0", "HRSD_Tot_W1", "HRSD_Tot_W2", "HRSD_Tot_W3", "HRSD_Tot_W4", "HRSD_Tot_W5", "HRSD_Tot_Final", "HRSD_Tot_FU1", "HRSD_Tot_FU2", "HRSD_Tot_FU3", "IDS_Tot_W0", "IDS_Tot_W1", "IDS_Tot_W2", "IDS_Tot_W3", "IDS_Tot_W4", "IDS_Tot_W5", "IDS_Tot_Final", "IDS_Tot_FU1", "IDS_Tot_FU2", "IDS_Tot_FU3", "QIDS_Tot_W0", "QIDS_Tot_W1", "QIDS_Tot_W2", "QIDS_Tot_W3", "QIDS_Tot_W4", "QIDS_Tot_W5", "QIDS_Tot_Final", "QIDS_Tot_FU1", "QIDS_Tot_FU2", "QIDS_Tot_FU3", "PSYCHOTHER"];
opts.VariableTypes = ["string", "string", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, "StudyID", "WhitespaceRule", "preserve");
opts = setvaropts(opts, "StudyID", "EmptyFieldRule", "auto");

% Import the data
TESTS_by_week = readtable("C:\Users\ins4004\Documents\Projects\Response_Trajectories_Project\THREED_Data_Analyses\THREE-D HRSD_IDS_QIDS Total Data.csv", opts);
TESTS_by_week_array = table2array(TESTS_by_week(:, 3:32));

%% Clear temporary variables
clear opts
% HAMD_by_week_array(:, 20:23) = [];
%% Detect sudden gains

% Initialize a logical array to store results
meetsCriteria = false(size(TESTS_by_week_array(:, 2:8))); % Assuming 372 rows
 allHAMD_Delta = zeros(size(TESTS_by_week_array)); 
 sg_reversalvalue = [];

% % Get the number of people in the table
% TotalSessions = 2:width(HAMD_by_week);

% Initialize logical array to store remission data starting at week 2
remission_criteria_met = false(size(TESTS_by_week_array, 1), 9);
response_criteria_met = false(size(TESTS_by_week_array, 1), 10);
% Loop through each participant and extract their data
% for p = 1:size(TESTS_by_week_array, 1)
%     participant_data = TESTS_by_week_array(p, :);
%     % Create value to check if two consecutive HAMD values are <= 10, and that any consecutive increase is either <= 3, or value of <= 6
%     remission_criteria_met_HAMD = participant_data(1:7) < 8;
%     remission_criteria_met_IDS = participant_data(11:17) < 14;
%     remission_criteria_met_QIDS = participant_data(21:27) < 6;
%     % increase = participant_data(4:end) - participant_data(3:end-1);
%     % second_less_than_6 = participant_data(4:end) <= 6;
%     remission_criteria_met_ppt = remission_criteria_met_HAMD & remission_criteria_met_IDS & remission_criteria_met_QIDS;
%     % Check all remission criteria for each participant
%     remission_criteria_met(p, :) = remission_criteria_met_ppt;
% end
for p = 1:size(TESTS_by_week_array, 1)
    participant_data = TESTS_by_week_array(p, 1:10);
    % Create value to check if two consecutive HAMD values are <= 10, and that any consecutive increase is either <= 3, or value of <= 6
    remission_criteria_met_10 = (participant_data(1:end-1) <= 10) & (participant_data(2:end) <= 10);
    increase = participant_data(2:end) - participant_data(1:end-1);
    second_less_than_6 = participant_data(2:end) <= 6;
    remission_criteria_met_ppt = remission_criteria_met_10 & ((increase <= 3) | second_less_than_6);
    % Create variables for a HAMD of half baseline HAMD to compare to the values at the following weeks
    halfbaseline = participant_data(:, 1) ./ 2;
    response_criteria = participant_data <= halfbaseline;
    % Check all remission criteria for each participant
    remission_criteria_met(p, :) = remission_criteria_met_ppt;
    response_criteria_met(p, :) = response_criteria;
end

for t = 1:size(remission_criteria_met, 1)
    if remission_criteria_met(t, 8) == 1
        remission_criteria_met(t, 8) = 4;
    end 
end

% Copy the original data to the new matrix with zeros in between
% newremission_criteria_met(:, 1:7) = remission_criteria_met(:, 1:7);
% newremission_criteria_met(:, 11:end) = remission_criteria_met(:, (7 + 1):end);
%% Create variables for sustained remission
% Final (week 6) and Follow Up 1
remission_criteria_sustained_final_fu1 = remission_criteria_met(:, 6) & remission_criteria_met(:, 7);
remission_criteria_sustained_final_fu2 = remission_criteria_met(:, 6) & remission_criteria_met(:, 7) & remission_criteria_met(:, 8);
remission_criteria_sustained_final_fu3 = remission_criteria_met(:, 6) & remission_criteria_met(:, 7) & remission_criteria_met(:, 8) & remission_criteria_met(:, 9);
remission_sustained_overall = horzcat(remission_criteria_sustained_final_fu1, remission_criteria_sustained_final_fu2, remission_criteria_sustained_final_fu3);

%% Create variables for sustained response
response_criteria_sustained_final_fu1 = response_criteria_met(:, 8);
response_criteria_sustained_final_fu2 = response_criteria_met(:, 9);
response_criteria_sustained_final_fu3 = response_criteria_met(:, 10);
response_sustained_overall = horzcat(response_criteria_sustained_final_fu1, response_criteria_sustained_final_fu2, response_criteria_sustained_final_fu3);

% Get the size of the matrix
[m, n] = size(remission_criteria_met);

% Specify the index where you want to add three columns (between columns 7 and 8)
insertIndex = 7;

% Initialize a new matrix with three additional columns
newMatrix = zeros(m, n + 2);

% Iterate through each row
for row = 1:m
    % Copy the columns before the insertion point
    newMatrix(row, 1:insertIndex) = remission_criteria_met(row, 1:insertIndex);
    newMatrix(row, (insertIndex + 3):end) = remission_criteria_met(row, (insertIndex + 1):end);
    
    % Check the condition for the surrounding columns
    if insertIndex > 1 && insertIndex < n && remission_criteria_met(row, insertIndex) == 1 && remission_criteria_met(row, insertIndex + 1) == 1
        % If 1's on both sides, add three columns of 1's
        newMatrix(row, insertIndex+1:insertIndex+2) = 1;
    else
        % Otherwise, add three columns of 0's
        newMatrix(row, insertIndex+1:insertIndex+2) = 0;
    end
    
    % Copy the columns after the insertion point
    newMatrix(row, insertIndex+3:end) = remission_criteria_met(row, insertIndex+1:end);
end

% Get the size of the matrix
[o, p] = size(newMatrix);

% Specify the index where you want to add three columns (between columns 7 and 8)
insertIndex2 = 10;

% Initialize a new matrix with three additional columns
final_remission_crit_met = zeros(o, p + 7);

% Iterate through each row
for row = 1:o
    % Copy the columns before the insertion point
    final_remission_crit_met(row, 1:insertIndex2) = newMatrix(row, 1:insertIndex2);
    final_remission_crit_met(row, insertIndex2 + 8:end) = newMatrix(row, insertIndex2 + 1:end);
    
    % Check the condition for the surrounding columns
    if insertIndex2 > 1 && insertIndex2 < p && newMatrix(row, insertIndex2) == 1 && newMatrix(row, insertIndex2 + 1) == 1
        % If 1's on both sides, add three columns of 1's
        final_remission_crit_met(row, (insertIndex2 + 1): (insertIndex2 + 7)) = 1;
    else
        % Otherwise, add three columns of 0's
        final_remission_crit_met(row, (insertIndex2 + 1) : (insertIndex2 + 7)) = 0;
    end
    
    % Copy the columns after the insertion point
    final_remission_crit_met(row, (insertIndex2 + 8):end) = newMatrix(row, (insertIndex2 + 1):end);
end

%% Find remitters with sustained remission

% Find remitted participants who sustained 2 weeks of remission

twowk_sustainedremission = sum(conv2(final_remission_crit_met, [1 1 1], 'valid') == 3, 2) > 0;
twowk_ppt_rem = find(twowk_sustainedremission);
counts_twowk = sum(twowk_sustainedremission);

fourwk_sustainedremission = sum(conv2(final_remission_crit_met, [1 1 1 1 1], 'valid') == 5, 2) > 0;
fourwk_ppt_rem = find(fourwk_sustainedremission);
counts_fourwk = sum(fourwk_sustainedremission);

sixwk_sustainedremission = sum(conv2(final_remission_crit_met, [1 1 1 1 1 1 1], 'valid') == 7, 2) > 0;
sixwk_ppt_rem = find(sixwk_sustainedremission);
counts_sixwk = sum(sixwk_sustainedremission);

eightwk_sustainedremission = sum(conv2(final_remission_crit_met, [1 1 1 1 1 1 1 1 1], 'valid') == 9, 2) > 0;
eightwk_ppt_rem = find(eightwk_sustainedremission);
counts_eightwk = sum(eightwk_sustainedremission);

twelvewk_sustainedremission = sum(conv2(final_remission_crit_met, [1 1 1 1 1 1 1 1 1 1 1 1 1], 'valid') == 13, 2) > 0;
twelvewk_ppt_rem = find(twelvewk_sustainedremission);
counts_twelvewk = sum(twelvewk_sustainedremission);


% Get the size of the matrix
[x, y] = size(response_criteria_met);

% Specify the index where you want to add three columns (between columns 7 and 8)
insertrpIndex = 8;

% Initialize a new matrix with three additional columns
newrpMatrix = zeros(x, y + 2);

% Iterate through each row
for rowrp = 1:x
    % Copy the columns before the insertion point
    newrpMatrix(rowrp, 1:insertrpIndex) = response_criteria_met(rowrp, 1:insertrpIndex);
    newrpMatrix(rowrp, (insertrpIndex + 3):end) = response_criteria_met(rowrp, (insertrpIndex + 1):end);
    
    % Check the condition for the surrounding columns
    if insertrpIndex > 1 && insertrpIndex < y && response_criteria_met(rowrp, insertrpIndex) == 1 && response_criteria_met(rowrp, insertrpIndex + 1) == 1
        % If 1's on both sides, add three columns of 1's
        newrpMatrix(rowrp, insertrpIndex+1:insertrpIndex+2) = 1;
    else
        % Otherwise, add three columns of 0's
        newrpMatrix(rowrp, insertrpIndex+1:insertrpIndex+2) = 0;
    end
    
    % Copy the columns after the insertion point
    newrpMatrix(rowrp, insertrpIndex+3:end) = response_criteria_met(rowrp, insertrpIndex+1:end);
end

% Get the size of the matrix
[orp, prp] = size(newrpMatrix);

% Specify the index where you want to add three columns (between columns 7 and 8)
insertrpIndex2 = 11;

% Initialize a new matrix with three additional columns
final_response_crit_met = zeros(orp, prp + 7);

% Iterate through each row
for rowrp = 1:orp
    % Copy the columns before the insertion point
    final_response_crit_met(rowrp, 1:insertrpIndex2) = newrpMatrix(rowrp, 1:insertrpIndex2);
    final_response_crit_met(rowrp, insertrpIndex2 + 9:end) = newrpMatrix(rowrp, insertrpIndex2 + 1:end);
    
    % Check the condition for the surrounding columns
    if insertrpIndex2 > 1 && insertrpIndex2 < prp && newrpMatrix(rowrp, insertrpIndex2) == 1 && newrpMatrix(rowrp, insertrpIndex2 + 1) == 1
        % If 1's on both sides, add three columns of 1's
        final_response_crit_met(rowrp, (insertrpIndex2 + 1): (insertrpIndex2 + 7)) = 1;
    else
        % Otherwise, add three columns of 0's
        final_response_crit_met(rowrp, (insertrpIndex2 + 1) : (insertrpIndex2 + 7)) = 0;
    end
    
    % Copy the columns after the insertion point
    final_response_crit_met(rowrp, (insertrpIndex2 + 8):end) = newrpMatrix(rowrp, (insertrpIndex2 + 1):end);
end

%% Find remitters with sustained remission

% Find remitted participants who sustained 2, 4, 6, 8, and 12 weeks of remission

twowk_sustainedresponse = sum(conv2(final_response_crit_met, [1 1 1], 'valid') == 3, 2) > 0;
twowk_ppt_rp = find(twowk_sustainedresponse);

fourwk_sustainedresponse = sum(conv2(final_response_crit_met, [1 1 1 1 1], 'valid') == 5, 2) > 0;
fourwk_ppt_rp = find(fourwk_sustainedresponse);

sixwk_sustainedresponse = sum(conv2(final_response_crit_met, [1 1 1 1 1 1 1], 'valid') == 7, 2) > 0;
sixwk_ppt_rp = find(sixwk_sustainedresponse);

eightwk_sustainedresponse = sum(conv2(final_response_crit_met, [1 1 1 1 1 1 1 1 1], 'valid') == 9, 2) > 0;
eightwk_ppt_rp = find(eightwk_sustainedresponse);

twelvewk_sustainedresponse = sum(conv2(final_response_crit_met, [1 1 1 1 1 1 1 1 1 1 1 1 1], 'valid') == 13, 2) > 0;
twelvewk_ppt_rp = find(twelvewk_sustainedresponse);

% Add logical variables for 2, 4, 6, 8, 12 weeks of sustained remission to TESTS_by_week_array

%% Check if remission criteria is met for each ppt
% Initialize variable to store remission & response criteria data
remission_criteria_met_atall = false(size(remission_criteria_met, 1), 1);

response_criteria_met_atall = false(size(remission_criteria_met, 1), 1);

% Check if remission & response criteria is met at least once for each ppt
remission_criteria_met_atall = any(remission_criteria_met == 1, 2);
response_criteria_met_atall = any(response_criteria_met == 1, 2);

% Get sum of total remitters & responders
total_remitters = sum(remission_criteria_met_atall);
total_responders = sum(response_criteria_met_atall);

%% Index each participants first instance of remission
% Extract the row (ppt) and column (week) that remission & response was reached for each instance of remission
[row_remission_index, col_remission_index] = find(remission_criteria_met == 1);
[row_response_index, col_response_index] = find(response_criteria_met == 1);

% Correct the session data to align with the original data by adding 1 the indexed sessions


% Concatenize the ppt and session data into the same 2-column variable and sort it so that it is in order through the ppts
remission_instances = horzcat(row_remission_index, col_remission_index);
remission_instances_sorted = sortrows(remission_instances, 1);
col_response_index_corrected = col_response_index - 1;
response_instances = horzcat(row_response_index, col_response_index_corrected);
response_instances_sorted = sortrows(response_instances);

% Extract the first instances of remission & response for each ppt
[first_rem_instance, rem_weekidx] = unique(remission_instances_sorted(:, 1), 'stable');
first_rem_week = remission_instances_sorted(rem_weekidx, 2);
[first_resp_instance, resp_weekidx] = unique(response_instances_sorted(:, 1), 'stable');
first_resp_week = response_instances_sorted(resp_weekidx, 2);
% Concatenize first remission instance data into one 2-column variable
remission_met_indices = horzcat(first_rem_instance, first_rem_week);
response_met_indices = horzcat(first_resp_instance, first_resp_week);

remission_criteria_week = zeros(size(remission_criteria_met, 1), 1);
response_criteria_week = zeros(size(response_criteria_met, 1), 1);

remission_criteria_week(first_rem_instance) = first_rem_week;
response_criteria_week(first_resp_instance) = first_resp_week;

%% Evaluate sudden gains for each ppt
% Loop through each participant
for weekindex = 2:5
    % Compute differences between consecutive scores for each participant
    HAMD_Delta =  TESTS_by_week_array(:, weekindex + 1) - TESTS_by_week_array(:, weekindex);

    allHAMD_Delta(:, weekindex) = HAMD_Delta;

    halfdelta = allHAMD_Delta./2; %divide the change in HAMD by 2

    reversalvalue = TESTS_by_week_array + halfdelta;

    % Calculate the percentage differences
    HAMD_percentdecrease =  (TESTS_by_week_array(:, weekindex) - TESTS_by_week_array(:, weekindex + 1)) ./ TESTS_by_week_array(:, weekindex) * 100;

    % Extract 3 Pre and 3 Post HAMD values from gain
    if weekindex == 2
         HAMD_pre = TESTS_by_week_array(:, (weekindex - 1):(weekindex)); 
    else 
        HAMD_pre = TESTS_by_week_array(:, (weekindex - 2):(weekindex)); 
    end

    if weekindex == 5
         HAMD_post = TESTS_by_week_array(:, (weekindex + 1):(weekindex + 2)); 
    else 
        HAMD_post = TESTS_by_week_array(:, (weekindex + 1):(weekindex + 3));
    end  

    % Calculate pre standard deviation 
    std_pre = std((HAMD_pre), 0, 2, 'omitmissing');

    % Calculate post standard deviation 
    std_post = std((HAMD_post), 0, 2, 'omitmissing');

    % Assuming HAMD_pre and HAMD_post are your arrays
    rows_with_NaN = any(isnan(HAMD_pre), 2) | any(isnan(HAMD_post), 2);

    % Assuming HAMD_pre and HAMD_post are your arrays
    rows_with_NaN_pre = sum(isnan(HAMD_pre), 2);
    rows_with_NaN_post = sum(isnan(HAMD_post), 2);

    % Rows with 0 NaN
    rows_with_zeros = (rows_with_NaN_pre == 0) & (rows_with_NaN_post == 0);

    % Rows with 1 NaN
    rows_with_1_NaN = (rows_with_NaN_pre == 1) & (rows_with_NaN_post == 0) | (rows_with_NaN_pre == 0) & (rows_with_NaN_post == 1);

    % Rows with 1 NaN pre and post
    rows_with_1_NaN_prepost = (rows_with_NaN_pre == 1) & (rows_with_NaN_post == 1);

    % Rows with 2 NaNs pre or post
    rows_with_2_NaNs = (rows_with_NaN_pre >= 2) | (rows_with_NaN_post >= 2);

    % Indexing with rows_with_NaN to access rows with NaN values
    zero_rows = find(rows_with_zeros);
    One_NaN_rows = find(rows_with_1_NaN);
    PrePost_NaN_rows = find(rows_with_1_NaN_prepost);
    bye_rows =  find(rows_with_2_NaNs);

     %% Double Check
  
    % Create a range of all possible row indexes
    totalRows = 1:372; % Replace 'totalNumberOfRows' with the total number of rows in your data

     % Combine all indexes into one array
    allIndexes = sort([zero_rows; One_NaN_rows; PrePost_NaN_rows; bye_rows]);

    % Find the missing rows
    missingRows = setdiff(totalRows, unique(allIndexes));

    doublecheck = length(One_NaN_rows) + length(PrePost_NaN_rows) + length(bye_rows) + length(zero_rows);

    %% Apply criteria 3, adjusting for missing values
            
    allsymptomfluctuation(bye_rows,:) = NaN;

    % Apply symptom fluctuation formula for one missing value pre and post
        for i = 1:length(PrePost_NaN_rows)
            PrePost_index = PrePost_NaN_rows(i);
            symptomfluctuation = 4.303 * sqrt(((TESTS_by_week_array(PrePost_index, weekindex) - 1) .* std_pre(PrePost_index).^2 + (TESTS_by_week_array(PrePost_index, weekindex + 1) - 1) .* std_post(PrePost_index).^2) ./ (TESTS_by_week_array(PrePost_index, weekindex) + TESTS_by_week_array(PrePost_index, weekindex + 1) - 2));

            allsymptomfluctuation(PrePost_index,:) = symptomfluctuation;
        end 

        % Apply symptom fluctuation formula for one missing value 
        for j = 1:length(One_NaN_rows)
            OneNaN_index = One_NaN_rows(j);
            symptomfluctuation = 3.182 * sqrt(((TESTS_by_week_array(OneNaN_index, weekindex) - 1) .* std_pre(OneNaN_index).^2 + (TESTS_by_week_array(OneNaN_index, weekindex + 1) - 1) .* std_post(OneNaN_index).^2) ./ (TESTS_by_week_array(OneNaN_index, weekindex) + TESTS_by_week_array(OneNaN_index, weekindex + 1) - 2));

            allsymptomfluctuation(OneNaN_index,:) = symptomfluctuation;
        end 

        % Apply symptom fluctuation formula for no missing values
        for k = 1:length(zero_rows)
            zero_index = zero_rows(k);
        symptomfluctuation = 2.776 * sqrt(((TESTS_by_week_array(zero_index, weekindex) - 1) .* std_pre(zero_index).^2 + (TESTS_by_week_array(zero_index, weekindex + 1) - 1) .* std_post(zero_index).^2) ./ (TESTS_by_week_array(zero_index, weekindex) + TESTS_by_week_array(zero_index, weekindex + 1) - 2));

         allsymptomfluctuation(zero_index,:) = symptomfluctuation;
        end

         % Criteria 3: Calculate Mpre - Mpost
    MeanDelta = mean(HAMD_pre, 2, 'omitmissing') - mean(HAMD_post, 2, 'omitmissing');
    
    %Check if all three criteria are met for each score difference
    criteriaCheck = HAMD_Delta <= -7 & HAMD_percentdecrease >= 25 &  MeanDelta > allsymptomfluctuation;

    meetsCriteria(:, weekindex) = criteriaCheck;
  
end

%% Find reversals occuring for each participant

% Index the sudden gain events
[rowIndex, colIndex] = find(meetsCriteria == 1);
sg_linearindex = sub2ind(size(meetsCriteria), rowIndex, colIndex);

% Find reversal value corresponding to the sudden gain index
sg_reversalvalue = reversalvalue(sg_linearindex);

% Concatenate sudden gain index with reversal value
sg_index = horzcat(rowIndex, colIndex, sg_reversalvalue);

% Find indices of sessions that occur after the sudden gain/find indices of zeros occurring after ones for each row
zero_after_one_indices = cell(size(meetsCriteria, 1), 1);
for row = 1:size(meetsCriteria, 1)
    % Find where ones occur
    one_indices = find(meetsCriteria(row, :) == 1);

    % Initialize array to store indices of zeros after ones
    zero_indices = [];

    % Collect indices of zeros after each one
    for i = 1:length(one_indices)
        if one_indices(i) < length(meetsCriteria(row, :))
            zero_indices = [zero_indices, find(meetsCriteria(row, one_indices(i):end) == 0) + one_indices(i) - 1];
        end
    end

    zero_after_one_indices{row} = zero_indices; 

% Remove duplicates and store in cell array
    zero_after_one_indices{row} = unique(zero_indices); % Find index of values after the sudden gain
end

%initalize variable to store matrix with all reversals
consolidatedreversal = false(size(TESTS_by_week_array));

% Compare HAMD values collected after the sudden gain to the reversal value
% rowIndex indicates rows where sudden gain occured
for i = 1:numel(rowIndex)

    % Store indices of values after the sudden gain
    indices = zero_after_one_indices{rowIndex(i)};
    
    % sg_index(i,2) = column index where sudden gain even toccured
    indices = indices(indices >= sg_index(i,2));

    % If the HAMD is greater than reversal value, store in reversal_ppt
reversal_ppt = TESTS_by_week_array(rowIndex(i), indices) >= sg_index(i,3);

consolidatedreversal(rowIndex(i), indices) = reversal_ppt;
end 

% Identify rows that meet all criteria
rows_with_ones_sg = any(meetsCriteria == 1, 2);
rows_with_ones_reversals = any(consolidatedreversal == 1, 2);

indices_with_ones = find(rows_with_ones_sg);
indices_with_ones_reversals = find(rows_with_ones_reversals);

% Create a new variable and assign modified values
rows_with_ones_sg_reversed = rows_with_ones_sg;
rows_with_ones_sg_reversed(indices_with_ones_reversals) = 0;


% Put all info about sustained remission and sg in the TESTS_by_week_array variable
% TESTS_by_week_array = horzcat(TESTS_by_week_array, remission_criteria_met_atall, remission_sustained_overall, rows_with_ones_sg_reversed, response_sustained_overall);
TESTS_by_week_array = horzcat(TESTS_by_week_array, remission_criteria_met_atall, rows_with_ones_sg_reversed, twowk_sustainedremission, fourwk_sustainedremission, sixwk_sustainedremission, eightwk_sustainedremission, twelvewk_sustainedremission, response_criteria_met_atall, twowk_sustainedresponse, fourwk_sustainedresponse, sixwk_sustainedresponse, eightwk_sustainedresponse, twelvewk_sustainedresponse, TESTS_by_week.PSYCHOTHER);

%% Create logical variables for each scenario
% 2-week sg vs. nsg sustained remission
rem_sus_twowk_sg = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 33);
counts_rem_sus_twowk_sg = sum(rem_sus_twowk_sg);
rem_sus_twowk_nsg = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 33);
counts_rem_sus_twowk_nsg = sum(rem_sus_twowk_nsg);
rem_nsus_twowk_sg = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 33);
counts_rem_nsus_twowk_sg = sum(rem_nsus_twowk_sg);
rem_nsus_twowk_nsg = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 33);
counts_rem_nsus_twowk_nsg = sum(rem_nsus_twowk_nsg);

% Manual Chi-squared
twowk_array = [counts_rem_sus_twowk_sg, counts_rem_nsus_twowk_sg; counts_rem_sus_twowk_nsg, counts_rem_nsus_twowk_nsg];

row_totals_twowk = sum(twowk_array, 2);
col_totals_twowk = sum(twowk_array, 1);
total_twowk = sum(row_totals_twowk);
expected_twowk = (row_totals_twowk * col_totals_twowk) / total_twowk;

% Calculate chi-squared test statistic
chi2stat_twowk = sum((twowk_array(:) - expected_twowk(:)).^2 ./ expected_twowk(:));

df = (size(twowk_array, 1) - 1) * (size(twowk_array, 2) - 1);

alpha = 0.05;

critical_value = chi2inv(1 - alpha, df);

p_value_twowk = 1 - chi2cdf(chi2stat_twowk, df);

OR_twowk = (counts_rem_sus_twowk_sg * counts_rem_nsus_twowk_nsg) / (counts_rem_sus_twowk_nsg * counts_rem_nsus_twowk_sg);
fprintf('Remitters who had sustained remission for at least two weeks were %.2f times more likely to have experienced a sudden gain than to have not experienced one, (Chi-squared statistic: %.2f, p-value: %.2f)\n', OR_twowk, chi2stat_twowk, p_value_twowk);

%% Therapy comparison
% 2-week sg vs. nsg sustained remission among ppl w/ therapy
rem_sus_twowk_sg_therapy = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 33) & TESTS_by_week_array(:, 44);
counts_rem_sus_twowk_sg_therapy = sum(rem_sus_twowk_sg_therapy);
rem_sus_twowk_nsg_therapy = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 33) & TESTS_by_week_array(:, 44);
counts_rem_sus_twowk_nsg_therapy = sum(rem_sus_twowk_nsg_therapy);
rem_nsus_twowk_sg_therapy = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 33) & TESTS_by_week_array(:, 44);
counts_rem_nsus_twowk_sg_therapy = sum(rem_nsus_twowk_sg_therapy);
rem_nsus_twowk_nsg_therapy = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 33) & TESTS_by_week_array(:, 44);
counts_rem_nsus_twowk_nsg_therapy = sum(rem_nsus_twowk_nsg_therapy);

% Manual Chi-squared
twowk_array_therapy = [counts_rem_sus_twowk_sg_therapy, counts_rem_nsus_twowk_sg_therapy; counts_rem_sus_twowk_nsg_therapy, counts_rem_nsus_twowk_nsg_therapy];

row_totals_twowk_therapy = sum(twowk_array_therapy, 2);
col_totals_twowk_therapy = sum(twowk_array_therapy, 1);
total_twowk_therapy = sum(row_totals_twowk_therapy);
expected_twowk_therapy = (row_totals_twowk_therapy * col_totals_twowk_therapy) / total_twowk_therapy;

% Calculate chi-squared test statistic
chi2stat_twowk_therapy = sum((twowk_array_therapy(:) - expected_twowk_therapy(:)).^2 ./ expected_twowk_therapy(:));

df = (size(twowk_array, 1) - 1) * (size(twowk_array, 2) - 1);

alpha = 0.05;

critical_value = chi2inv(1 - alpha, df);

p_value_twowk_therapy = 1 - chi2cdf(chi2stat_twowk_therapy, df);

OR_twowk_therapy = (counts_rem_sus_twowk_sg_therapy * counts_rem_nsus_twowk_nsg_therapy) / (counts_rem_sus_twowk_nsg_therapy * counts_rem_nsus_twowk_sg_therapy);
fprintf('Among remitters who were in therapy during treatment, sudden gainers were %.2f times more likely to have sustained remission for at least 2 weeks, (Chi-squared statistic: %.2f, p-value: %.2f)\n', OR_twowk_therapy, chi2stat_twowk_therapy, p_value_twowk_therapy);

%% Therapy comparison
% sg vs. nsg and therapy
rem_sg_therapy = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 44);
counts_rem_sg_therapy = sum(rem_sg_therapy);
rem_nsg_therapy = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 44);
counts_rem_nsg_therapy = sum(rem_nsg_therapy);
rem_sg_ntherapy = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 44);
counts_rem_sg_ntherapy = sum(rem_sg_ntherapy);
rem_nsg_ntherapy = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 44);
counts_rem_nsg_ntherapy = sum(rem_nsg_ntherapy);

% Manual Chi-squared
rem_therapy_array = [counts_rem_sg_therapy, counts_rem_sg_ntherapy; counts_rem_nsg_therapy, counts_rem_nsg_ntherapy];

row_totals_therapy = sum(rem_therapy_array, 2);
col_totals_therapy = sum(rem_therapy_array, 1);
total_therapy = sum(row_totals_therapy);
expected_therapy = (row_totals_therapy * col_totals_therapy) / total_therapy;

% Calculate chi-squared test statistic
chi2stat_therapy = sum((rem_therapy_array(:) - expected_therapy(:)).^2 ./ expected_therapy(:));

df = (size(twowk_array, 1) - 1) * (size(twowk_array, 2) - 1);

alpha = 0.05;

critical_value = chi2inv(1 - alpha, df);

p_value_therapy = 1 - chi2cdf(chi2stat_therapy, df);

OR_therapy = (counts_rem_sg_therapy * counts_rem_nsg_ntherapy) / (counts_rem_nsg_therapy * counts_rem_sg_ntherapy);
fprintf('Remitters were in therapy during treatment were %.2f times more likely to have experienced a sudden gain than to have not experienced one, (Chi-squared statistic: %.2f, p-value: %.2f)\n', OR_therapy, chi2stat_therapy, p_value_therapy)

%% Therapy comparison
% therapy & sustained remission
sus_rem_therapy = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 33) & TESTS_by_week_array(:, 44);
counts_sus_rem_therapy = sum(sus_rem_therapy);
sus_rem_ntherapy = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 33) & ~TESTS_by_week_array(:, 44);
counts_sus_rem_ntherapy = sum(sus_rem_ntherapy);
nsus_rem_therapy = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 33) & TESTS_by_week_array(:, 44);
counts_nsus_rem_therapy = sum(nsus_rem_therapy);
nsus_rem_ntherapy = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 33) & ~TESTS_by_week_array(:, 44);
counts_nsus_rem_ntherapy = sum(nsus_rem_ntherapy);

% Manual Chi-squared
sus_rem_therapy_array = [counts_sus_rem_therapy, counts_sus_rem_ntherapy; counts_nsus_rem_therapy, counts_nsus_rem_ntherapy];

row_totals_rem_therapy = sum(sus_rem_therapy_array, 2);
col_totals_rem_therapy = sum(sus_rem_therapy_array, 1);
total_rem_therapy = sum(row_totals_rem_therapy);
expected_rem_therapy = (row_totals_rem_therapy * col_totals_rem_therapy) / total_rem_therapy;

% Calculate chi-squared test statistic
chi2stat_rem_therapy = sum((sus_rem_therapy_array(:) - expected_rem_therapy(:)).^2 ./ expected_rem_therapy(:));

df = (size(twowk_array, 1) - 1) * (size(twowk_array, 2) - 1);

alpha = 0.05;

critical_value = chi2inv(1 - alpha, df);

p_value_rem_therapy = 1 - chi2cdf(chi2stat_rem_therapy, df);

OR_rem_therapy = (counts_sus_rem_therapy * counts_nsus_rem_ntherapy) / (counts_nsus_rem_therapy * counts_sus_rem_ntherapy);
fprintf('Remitters were in therapy during treatment were %.2f times more likely to have sustained remission for at least 2 weeks, (Chi-squared statistic: %.2f, p-value: %.2f)\n', OR_rem_therapy, chi2stat_rem_therapy, p_value_rem_therapy)

%% Create logical variables for each scenario
% 4-week sg vs. nsg sustained remission
rem_sus_fourwk_sg = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 34);
counts_rem_sus_fourwk_sg = sum(rem_sus_fourwk_sg);
rem_sus_fourwk_nsg = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 34);
counts_rem_sus_fourwk_nsg = sum(rem_sus_fourwk_nsg);
rem_nsus_fourwk_sg = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 34);
counts_rem_nsus_fourwk_sg = sum(rem_nsus_fourwk_sg);
rem_nsus_fourwk_nsg = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 34);
counts_rem_nsus_fourwk_nsg = sum(rem_nsus_fourwk_nsg);

% Manual Chi-squared
fourwk_array = [counts_rem_sus_fourwk_sg, counts_rem_nsus_fourwk_sg; counts_rem_sus_fourwk_nsg, counts_rem_nsus_fourwk_nsg];

row_totals_fourwk = sum(fourwk_array, 2);
col_totals_fourwk = sum(fourwk_array, 1);
total_fourwk = sum(row_totals_fourwk);
expected_fourwk = (row_totals_fourwk * col_totals_fourwk) / total_fourwk;

% Calculate chi-squared test statistic
chi2stat_fourwk = sum((fourwk_array(:) - expected_fourwk(:)).^2 ./ expected_fourwk(:));

p_value_fourwk = 1 - chi2cdf(chi2stat_fourwk, df);

OR_fourwk = (counts_rem_sus_fourwk_sg * counts_rem_nsus_fourwk_nsg) / (counts_rem_sus_fourwk_nsg * counts_rem_nsus_fourwk_sg);
fprintf('Remitters who had sustained remission for at least four weeks were %.2f times more likely to have experienced a sudden gain than to have not experienced one (Chi-squared statistic: %.2f, p-value: %.2f)\n', OR_fourwk, chi2stat_fourwk, p_value_fourwk);

%% Create logical variables for each scenario
% 6-week sg vs. nsg sustained remission
rem_sus_sixwk_sg = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 35);
counts_rem_sus_sixwk_sg = sum(rem_sus_sixwk_sg);
rem_sus_sixwk_nsg = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 35);
counts_rem_sus_sixwk_nsg = sum(rem_sus_sixwk_nsg);
rem_nsus_sixwk_sg = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 35);
counts_rem_nsus_sixwk_sg = sum(rem_nsus_sixwk_sg);
rem_nsus_sixwk_nsg = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 35);
counts_rem_nsus_sixwk_nsg = sum(rem_nsus_sixwk_nsg);

% Manual Chi-squared
sixwk_array = [counts_rem_sus_sixwk_sg, counts_rem_nsus_sixwk_sg; counts_rem_sus_sixwk_nsg, counts_rem_nsus_sixwk_nsg];

row_totals_sixwk = sum(sixwk_array, 2);
col_totals_sixwk = sum(sixwk_array, 1);
total_sixwk = sum(row_totals_sixwk);
expected_sixwk = (row_totals_sixwk * col_totals_sixwk) / total_sixwk;

% Calculate chi-squared test statistic
chi2stat_sixwk = sum((sixwk_array(:) - expected_sixwk(:)).^2 ./ expected_sixwk(:));

p_value_sixwk = 1 - chi2cdf(chi2stat_sixwk, df);

OR_sixwk = (counts_rem_sus_sixwk_sg * counts_rem_nsus_sixwk_nsg) / (counts_rem_sus_sixwk_nsg * counts_rem_nsus_sixwk_sg);
fprintf('Remitters who had sustained remission for at least six weeks were %.2f times more likely to have experienced a sudden gain than to have not experienced one (Chi-squared statistic: %.2f, p-value: %.2f)\n', OR_sixwk, chi2stat_sixwk, p_value_sixwk);
%% Create logical variables for each scenario
% 8-week sg vs. nsg sustained remission
rem_sus_eightwk_sg = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 36);
counts_rem_sus_eightwk_sg = sum(rem_sus_eightwk_sg);
rem_sus_eightwk_nsg = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 36);
counts_rem_sus_eightwk_nsg = sum(rem_sus_eightwk_nsg);
rem_nsus_eightwk_sg = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 36);
counts_rem_nsus_eightwk_sg = sum(rem_nsus_eightwk_sg);
rem_nsus_eightwk_nsg = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 36);
counts_rem_nsus_eightwk_nsg = sum(rem_nsus_eightwk_nsg);

% Manual Chi-squared
eightwk_array = [counts_rem_sus_eightwk_sg, counts_rem_nsus_eightwk_sg; counts_rem_sus_eightwk_nsg, counts_rem_nsus_eightwk_nsg];

row_totals_eightwk = sum(eightwk_array, 2);
col_totals_eightwk = sum(eightwk_array, 1);
total_eightwk = sum(row_totals_eightwk);
expected_eightwk = (row_totals_eightwk * col_totals_eightwk) / total_eightwk;

% Calculate chi-squared test statistic
chi2stat_eightwk = sum((eightwk_array(:) - expected_eightwk(:)).^2 ./ expected_eightwk(:));

p_value_eightwk = 1 - chi2cdf(chi2stat_eightwk, df);

OR_eightwk = (counts_rem_sus_eightwk_sg * counts_rem_nsus_eightwk_nsg) / (counts_rem_sus_eightwk_nsg * counts_rem_nsus_eightwk_sg);
fprintf('Remitters who had sustained remission for at least eight weeks were %.2f times more likely to have experienced a sudden gain than to have not experienced one (Chi-squared statistic: %.2f, p-value: %.2f)\n', OR_eightwk, chi2stat_eightwk, p_value_eightwk);

%% Create logical variables for each scenario
% 12-week sg vs. nsg sustained remission
rem_sus_twelvewk_sg = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 37);
counts_rem_sus_twelvewk_sg = sum(rem_sus_twelvewk_sg);
rem_sus_twelvewk_nsg = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 37);
counts_rem_sus_twelvewk_nsg = sum(rem_sus_twelvewk_nsg);
rem_nsus_twelvewk_sg = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 37);
counts_rem_nsus_twelvewk_sg = sum(rem_nsus_twelvewk_sg);
rem_nsus_twelvewk_nsg = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 37);
counts_rem_nsus_twelvewk_nsg = sum(rem_nsus_twelvewk_nsg);

% Manual Chi-squared
twelvewk_array = [counts_rem_sus_twelvewk_sg, counts_rem_nsus_twelvewk_sg; counts_rem_sus_twelvewk_nsg, counts_rem_nsus_twelvewk_nsg];

row_totals_twelvewk = sum(twelvewk_array, 2);
col_totals_twelvewk = sum(twelvewk_array, 1);
total_twelvewk = sum(row_totals_twelvewk);
expected_twelvewk = (row_totals_twelvewk * col_totals_twelvewk) / total_twelvewk;

% Calculate chi-squared test statistic
chi2stat_twelvewk = sum((twelvewk_array(:) - expected_twelvewk(:)).^2 ./ expected_twelvewk(:));

p_value_twelvewk = 1 - chi2cdf(chi2stat_twelvewk, df);

OR_twelvewk = (counts_rem_sus_twelvewk_sg * counts_rem_nsus_twelvewk_nsg) / (counts_rem_sus_twelvewk_nsg * counts_rem_nsus_twelvewk_sg);
fprintf('Remitters who had sustained remission for at least 12 weeks were %.2f times more likely to have experienced a sudden gain than to have not experienced one (Chi-squared statistic: %.2f, p-value: %.2f)\n', OR_twelvewk, chi2stat_twelvewk, p_value_twelvewk);

%% Create logical variables for each scenario
% 2-week sg vs. nsg sustained response
rp_sus_twowk_sg = TESTS_by_week_array(:, 38) & TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 39);
counts_rp_sus_twowk_sg = sum(rp_sus_twowk_sg);
rp_sus_twowk_nsg = TESTS_by_week_array(:, 38) & ~TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 39);
counts_rp_sus_twowk_nsg = sum(rp_sus_twowk_nsg);
rp_nsus_twowk_sg = TESTS_by_week_array(:, 38) & TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 39);
counts_rp_nsus_twowk_sg = sum(rp_nsus_twowk_sg);
rp_nsus_twowk_nsg = TESTS_by_week_array(:, 38) & ~TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 39);
counts_rp_nsus_twowk_nsg = sum(rp_nsus_twowk_nsg);

% Manual Chi-squared
twowk_rp_array = [counts_rp_sus_twowk_sg, counts_rp_nsus_twowk_sg; counts_rp_nsus_twowk_nsg, counts_rp_nsus_twowk_nsg];

row_totals_twowk_rp = sum(twowk_rp_array, 2);
col_totals_twowk_rp = sum(twowk_rp_array, 1);
total_twowk_rp = sum(row_totals_twowk_rp);
expected_twowk_rp = (row_totals_twowk_rp * col_totals_twowk_rp) / total_twowk_rp;

% Calculate chi-squared test statistic
chi2stat_twowk_rp = sum((twowk_rp_array(:) - expected_twowk_rp(:)).^2 ./ expected_twowk_rp(:));

% Degrees of freedom

p_value_twowk_rp = 1 - chi2cdf(chi2stat_twowk_rp, df);

OR_twowk_rp = (counts_rp_sus_twowk_sg * counts_rp_nsus_twowk_nsg) / (counts_rp_sus_twowk_nsg * counts_rp_nsus_twowk_sg);
fprintf('Responders who had sustained response for at least two weeks were %.2f times more likely to have experienced a sudden gain than to have not experienced one (Chi-squared statistic: %.2f, p-value: %.2f)\n', OR_twowk_rp, chi2stat_twowk_rp, p_value_twowk_rp);

%% Create logical variables for each scenario
% 4-week sg vs. nsg sustained response
rp_sus_fourwk_sg = TESTS_by_week_array(:, 38) & TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 40);
counts_rp_sus_fourwk_sg = sum(rp_sus_fourwk_sg);
rp_sus_fourwk_nsg = TESTS_by_week_array(:, 38) & ~TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 40);
counts_rp_sus_fourwk_nsg = sum(rp_sus_fourwk_nsg);
rp_nsus_fourwk_sg = TESTS_by_week_array(:, 38) & TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 40);
counts_rp_nsus_fourwk_sg = sum(rp_nsus_fourwk_sg);
rp_nsus_fourwk_nsg = TESTS_by_week_array(:, 38) & ~TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 40);
counts_rp_nsus_fourwk_nsg = sum(rp_nsus_fourwk_nsg);

% Manual Chi-squared
fourwk_array_rp = [counts_rp_sus_fourwk_sg, counts_rp_nsus_fourwk_sg; counts_rp_sus_fourwk_nsg, counts_rp_nsus_fourwk_nsg];

row_totals_fourwk_rp = sum(fourwk_array_rp, 2);
col_totals_fourwk_rp = sum(fourwk_array_rp, 1);
total_fourwk_rp = sum(row_totals_fourwk_rp);
expected_fourwk_rp = (row_totals_fourwk_rp * col_totals_fourwk_rp) / total_fourwk_rp;

% Calculate chi-squared test statistic
chi2stat_fourwk_rp = sum((fourwk_array_rp(:) - expected_fourwk_rp(:)).^2 ./ expected_fourwk_rp(:));

p_value_fourwk_rp = 1 - chi2cdf(chi2stat_fourwk_rp, df);

OR_fourwk_rp = (counts_rp_sus_fourwk_sg * counts_rp_nsus_fourwk_nsg) / (counts_rp_sus_fourwk_nsg * counts_rp_nsus_fourwk_sg);
fprintf('Responders who had sustained response for at least four weeks were %.2f times more likely to have experienced a sudden gain than to have not experienced one (Chi-squared statistic: %.2f, p-value: %.2f)\n', OR_fourwk_rp, chi2stat_fourwk_rp, p_value_fourwk_rp);

%% Create logical variables for each scenario
% 6-week sg vs. nsg sustained remission
rp_sus_sixwk_sg = TESTS_by_week_array(:, 38) & TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 41);
counts_rp_sus_sixwk_sg = sum(rp_sus_sixwk_sg);
rp_sus_sixwk_nsg = TESTS_by_week_array(:, 38) & ~TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 41);
counts_rp_sus_sixwk_nsg = sum(rp_sus_sixwk_nsg);
rp_nsus_sixwk_sg = TESTS_by_week_array(:, 38) & TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 41);
counts_rp_nsus_sixwk_sg = sum(rp_nsus_sixwk_sg);
rp_nsus_sixwk_nsg = TESTS_by_week_array(:, 38) & ~TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 41);
counts_rp_nsus_sixwk_nsg = sum(rp_nsus_sixwk_nsg);

% Manual Chi-squared
sixwk_array_rp = [counts_rp_sus_sixwk_sg, counts_rp_nsus_sixwk_sg; counts_rp_sus_sixwk_nsg, counts_rp_nsus_sixwk_nsg];

row_totals_sixwk_rp = sum(sixwk_array_rp, 2);
col_totals_sixwk_rp = sum(sixwk_array_rp, 1);
total_sixwk_rp = sum(row_totals_sixwk_rp);
expected_sixwk_rp = (row_totals_sixwk_rp * col_totals_sixwk_rp) / total_sixwk_rp;

% Calculate chi-squared test statistic
chi2stat_sixwk_rp = sum((sixwk_array_rp(:) - expected_sixwk_rp(:)).^2 ./ expected_sixwk_rp(:));

p_value_sixwk_rp = 1 - chi2cdf(chi2stat_sixwk_rp, df);

OR_sixwk_rp = (counts_rp_sus_sixwk_sg * counts_rp_nsus_sixwk_nsg) / (counts_rp_sus_sixwk_nsg * counts_rp_nsus_sixwk_sg);
fprintf('Responders who had sustained response for at least six weeks were %.2f times more likely to have experienced a sudden gain than to have not experienced one (Chi-squared statistic: %.2f, p-value: %.2f)\n', OR_sixwk_rp, chi2stat_sixwk_rp, p_value_sixwk_rp);
%% Create logical variables for each scenario
% 8-week sg vs. nsg sustained remission
rp_sus_eightwk_sg = TESTS_by_week_array(:, 38) & TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 42);
counts_rp_sus_eightwk_sg = sum(rp_sus_eightwk_sg);
rp_sus_eightwk_nsg = TESTS_by_week_array(:, 38) & ~TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 42);
counts_rp_sus_eightwk_nsg = sum(rp_sus_eightwk_nsg);
rp_nsus_eightwk_sg = TESTS_by_week_array(:, 38) & TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 42);
counts_rp_nsus_eightwk_sg = sum(rp_nsus_eightwk_sg);
rp_nsus_eightwk_nsg = TESTS_by_week_array(:, 38) & ~TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 42);
counts_rp_nsus_eightwk_nsg = sum(rp_nsus_eightwk_nsg);

% Manual Chi-squared
eightwk_array_rp = [counts_rp_sus_eightwk_sg, counts_rp_nsus_eightwk_sg; counts_rp_sus_eightwk_nsg, counts_rp_nsus_eightwk_nsg];

row_totals_eightwk_rp = sum(eightwk_array_rp, 2);
col_totals_eightwk_rp = sum(eightwk_array_rp, 1);
total_eightwk_rp = sum(row_totals_eightwk_rp);
expected_eightwk_rp = (row_totals_eightwk_rp * col_totals_eightwk_rp) / total_eightwk_rp;

% Calculate chi-squared test statistic
chi2stat_eightwk_rp = sum((eightwk_array_rp(:) - expected_eightwk_rp(:)).^2 ./ expected_eightwk_rp(:));

p_value_eightwk_rp = 1 - chi2cdf(chi2stat_eightwk_rp, df);

OR_eightwk_rp = (counts_rp_sus_eightwk_sg * counts_rp_nsus_eightwk_nsg) / (counts_rp_sus_eightwk_nsg * counts_rp_nsus_eightwk_sg);
fprintf('Responders who had sustained response for at least eight weeks were %.2f times more likely to have experienced a sudden gain than to have not experienced one (Chi-squared statistic: %.2f, p-value: %.2f)\n', OR_eightwk_rp, chi2stat_eightwk_rp, p_value_eightwk_rp);

%% Create logical variables for each scenario
% 12-week sg vs. nsg sustained remission
rp_sus_twelvewk_sg = TESTS_by_week_array(:, 38) & TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 43);
counts_rp_sus_twelvewk_sg = sum(rp_sus_twelvewk_sg);
rp_sus_twelvewk_nsg = TESTS_by_week_array(:, 38) & ~TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 43);
counts_rp_sus_twelvewk_nsg = sum(rp_sus_twelvewk_nsg);
rp_nsus_twelvewk_sg = TESTS_by_week_array(:, 38) & TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 43);
counts_rp_nsus_twelvewk_sg = sum(rp_nsus_twelvewk_sg);
rp_nsus_twelvewk_nsg = TESTS_by_week_array(:, 38) & ~TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 43);
counts_rp_nsus_twelvewk_nsg = sum(rp_nsus_twelvewk_nsg);

% Manual Chi-squared
twelvewk_array_rp = [counts_rp_sus_twelvewk_sg, counts_rp_nsus_twelvewk_sg; counts_rp_sus_twelvewk_nsg, counts_rp_nsus_twelvewk_nsg];

row_totals_twelvewk_rp = sum(twelvewk_array_rp, 2);
col_totals_twelvewk_rp = sum(twelvewk_array_rp, 1);
total_twelvewk_rp = sum(row_totals_twelvewk_rp);
expected_twelvewk_rp = (row_totals_twelvewk_rp * col_totals_twelvewk_rp) / total_twelvewk_rp;

% Calculate chi-squared test statistic
chi2stat_twelvewk_rp = sum((twelvewk_array_rp(:) - expected_twelvewk_rp(:)).^2 ./ expected_twelvewk_rp(:));

p_value_twelvewk_rp = 1 - chi2cdf(chi2stat_twelvewk_rp, df);

OR_twelvewk_rp = (counts_rp_sus_twelvewk_sg * counts_rp_nsus_twelvewk_nsg) / (counts_rp_sus_twelvewk_nsg * counts_rp_nsus_twelvewk_sg);
fprintf('Responders who had sustained response for at least 12 weeks were %.2f times more likely to have experienced a sudden gain than to have not experienced one (Chi-squared statistic: %.2f, p-value: %.2f)\n', OR_twelvewk_rp, chi2stat_twelvewk_rp, p_value_twelvewk_rp);

% Create a new variable for sg week

sg_week_n = zeros(size(rows_with_ones_sg, 1), 1);

sg_week_n(rowIndex) = colIndex;

sg_week_n(indices_with_ones_reversals) = 0; 

sgavg_across_sessions = sum(meetsCriteria, 1);


 %% Initialize the number of rows and columns for 4x4 subplotx
numRows = 4;
numCols = 6;

% Calculate the total number of subplots
numSubplots = numRows * numCols;

% Create a cell array to hold the handles to individual figures
figureHandles = cell(1, numSubplots);

%% Generate figures for each participant

variableNames = {'sg_ppt', 'remission_met_ppt', 'remission_met_week', 'sg_week', 'response_met', 'response_week'};

% Convert indicies_with_ones from a logical to a table format
rows_with_ones_table = array2table(rows_with_ones_sg_reversed, 'variableNames', {'sg_ppt'});


% Convert remission_criteria_met_atall from a logical to a table format
remission_criteria_met_atall_table = array2table(remission_criteria_met_atall, 'variableNames', {'remission_met_ppt'});

% Convert remission_criteria_week from an array to a table format
remission_criteria_week_table = array2table(remission_criteria_week, 'VariableNames', {'remission_met_week'});

% Convert sg_week_n from an array to a table format
sg_week_n_table = array2table(sg_week_n, 'VariableNames', {'sg_week'});

% Convert response_criteria_met_atall from a logical to table
response_criteria_met_atall_table = array2table(response_criteria_met_atall, 'VariableNames', {'response_met'});

% Convert response_criteria_week from array to table
response_criteria_week_table = array2table(response_criteria_week, 'VariableNames', {'response_week'});

% Concatenate sg_ppt to HAMD_by_week
TESTS_by_week = [TESTS_by_week, rows_with_ones_table];

TESTS_by_week = [TESTS_by_week, remission_criteria_met_atall_table];

TESTS_by_week = [TESTS_by_week, remission_criteria_week_table];

TESTS_by_week = [TESTS_by_week, sg_week_n_table];

TESTS_by_week = [TESTS_by_week, response_criteria_met_atall_table];

TESTS_by_week = [TESTS_by_week, response_criteria_week_table];

% Get the number of people in the table
TotalParticipants = size(TESTS_by_week, 1);

% Sudden Gain Analysis Comparison: Nili vs Us
our_sgsum = sum(TESTS_by_week.sg_ppt == 1);

% Run some preliminary statistics on SGs and compare to Nili's findings
our_sg_proportion = (our_sgsum / 372) * 100;
fprintf('Our total sudden gainers: %d\n', our_sgsum);
% fprintf('Nili total sudden gainers: %d\n', Nili_sgsum);
% fprintf('Total matching sudden gainers: %d\n', sum_matching_gainers);
fprintf('Percentage of participants who experienced a sudden gain: %.2f%%\n', our_sg_proportion)


%% Run statistics on remission
% Find amount of people who met remission and which sessions they met remission based on all.7 sheet
sum_remitted = sum(TESTS_by_week.remission_met_ppt == 1);

% Calculate the remission rate
remission_rate = (sum_remitted / TotalParticipants) * 100;
% Find most common session for remission to occur

% Extract nonremitters from session count
nonZeroweeks = TESTS_by_week.remission_met_week(TESTS_by_week.remission_met_week ~= 0);

% Find most common session
most_common_remission_week = mode(nonZeroweeks);
unique_week = unique(nonZeroweeks);

% Count amount of remission instances at each session
counts = histcounts(nonZeroweeks);
counts_vert = counts';

% Combine session indices with counts
remission_week_freq = horzcat(unique_week, counts_vert);

% Find percentage of remission instances that occur at each session
remission_week_percentage = (counts_vert ./ total_remitters) * 100;

% Concatenize session, # of remitters, and percentage of remitters into one 72x3 variable
remission_week_freq = horzcat(unique_week, counts_vert, remission_week_percentage);

% if remission_met == 1
%     sg_of_remitters = find(sg_ppt == 1);
%     fprintf('%d of remitters were sudden gainers', sg_of_remitters)
% end

% Prints the number, percentage, session mode, and breakdown of frequency of remission by session
fprintf('Total remitters: %d\n', sum_remitted);
fprintf('Remission rate: %.2f%%\n', remission_rate);
fprintf('Most remitted by week: %d\n', most_common_remission_week);
for m = 1:length(unique_week)
    fprintf('Week: %d: Frequency %.2f%%\n', remission_week_freq(m, 1), remission_week_freq(m, 3))
end

%% Run statistics on response
% Find amount of people who met remission and which sessions they met remission based on all.7 sheet
sum_responded = sum(TESTS_by_week.response_met == 1);

% Calculate the remission rate
response_rate = (sum_responded / TotalParticipants) * 100;
% Find most common session for remission to occur

% Extract nonremitters from session count
nonZeroweeksresp = TESTS_by_week.response_week(TESTS_by_week.response_week ~= 0);

% Find most common session
most_common_response_week = mode(nonZeroweeksresp);
unique_week_resp = unique(nonZeroweeksresp);

% Count amount of remission instances at each session
countsresp = histcounts(nonZeroweeksresp);
countsresp_vert = countsresp';

% Combine session indices with counts
response_week_freq = horzcat(unique_week_resp, countsresp_vert);

% Find percentage of remission instances that occur at each session
response_week_percentage = (countsresp_vert ./ total_responders) * 100;

% Concatenize session, # of remitters, and percentage of remitters into one 72x3 variable
response_week_freq = horzcat(unique_week_resp, countsresp_vert, response_week_percentage);

% if remission_met == 1
%     sg_of_remitters = find(sg_ppt == 1);
%     fprintf('%d of remitters were sudden gainers', sg_of_remitters)
% end

% Prints the number, percentage, session mode, and breakdown of frequency of remission by session
fprintf('Total responders: %d\n', sum_responded);
fprintf('Response rate: %.2f%%\n', response_rate);
fprintf('Most responded by week: %d\n', most_common_response_week);
for m = 1:length(unique_week_resp)
    fprintf('Week: %d: Frequency %.2f%%\n', response_week_freq(m, 1), response_week_freq(m, 3))
end

% Loop through each person and create a figure
for personIndex = 1:TotalParticipants
    % Store all HAMD scores for the current person into an array
    individual_HAMD = TESTS_by_week(personIndex, 3:12);
    %all_crit = HAMD_by_week.all_crit(personIndex);
    %sg_session_n = HAMD_by_week.sg_session_n(personIndex);
    sg_ppt = TESTS_by_week.sg_ppt(personIndex);
    sg_week = TESTS_by_week.sg_week(personIndex);
    remission_met_ppt = TESTS_by_week.remission_met_ppt(personIndex);
    remission_week = TESTS_by_week.remission_met_week(personIndex);
    response_met = TESTS_by_week.response_met(personIndex);
    response_week = TESTS_by_week.response_week(personIndex);
    
    % if remission_met && sg_ppt == 1
    %     rem_sg(personIndex) = true;
    % else
    %     rem_sg(personIndex) = false;
    % end
    % rem_sg_vert = rem_sg';
    % sum_rem_sg_vert = sum(rem_sg_vert);
    % rem_sg_percentage = (sum_rem_sg_vert / 240) * 100; 
    % sg_of_remitters = sum(sg_ppt) / sum(remission_met);

    % fprintf('%.2f%%\n of participants were both remitters and sudden gainers', rem_sg_percentage)

    % % Create a figure for the current person
    % figure;

    % Determine the figure and subplot index
    figureIndex = ceil(personIndex / numSubplots);
    subplotIndex = mod(personIndex - 1, numSubplots) + 1;

    % If it's the first subplot of a new figure, create a new figure
    if subplotIndex == 1
        figureHandles{figureIndex} = figure;
    end

    % Use subplot to specify the current subplot within the current figure
    subplot(numRows, numCols, subplotIndex);

    % % Use subplot to specify the current subplot
    % subplot(numRows, numCols, mod(personIndex - 1, numSubplots) + 1);

    %Index through the ID column
    ID = TESTS_by_week.StudyID(personIndex);

      %Plot the HAMD data for the current person
    if sg_ppt == 1 && remission_met_ppt == 1 % all_crit == 1
        plot(0:(width(individual_HAMD) - 1), table2array(individual_HAMD), '-m*')

        % Add labels, titles, legends, etc. to the figure
        title(['Subject ', num2str(ID), ' SG: ', num2str(sg_week), ' R: ', num2str(remission_week)]);
        xlabel('TMS Treatment Week');
        ylabel('HAM-D Score');

        %Set xlim and ylim
        xlim([0, max(10)]);
        ylim([min(0), max(35)]);

%         hold on;
% 
% % Plotting specific points in a different color based on the logical array
% plot(0:(width(individual_HAMD) - 1), HAMD_by_week(meetsCriteria), 'ro', 'MarkerSize', 8); % Plot red circles for specific points
% 
% hold off;

        
    elseif sg_ppt == 1 && remission_met_ppt == 0 && response_met == 1 % all_crit == 0 
        plot(0:(width(individual_HAMD) - 1), table2array(individual_HAMD), '-r*')

        % Add labels, titles, legends, etc. to the figure
        title(['Subject ', num2str(ID), ' SG: ', num2str(sg_week), ' Rp: ', num2str(response_week)]);
        xlabel('TMS Treatment Week');
        ylabel('HAM-D Score');

        %Set xlim and ylim
        xlim([0, max(10)]);
        ylim([min(0), max(35)]);


%         hold on;
% 
% % Plotting specific points in a different color based on the logical array
% plot(0:(width(individual_HAMD) - 1), HAMD_by_week(meetsCriteria), 'ro', 'MarkerSize', 8); % Plot red circles for specific points
% 
% hold off;
        
    elseif sg_ppt == 0 && remission_met_ppt == 1 % all_crit == 1
        plot(0:(width(individual_HAMD) - 1), table2array(individual_HAMD), '-b*')

        % Add labels, titles, legends, etc. to the figure
        title(['Subject ', num2str(ID), ' R: ', num2str(remission_week)]);
        xlabel('TMS Treatment Week');
        ylabel('HAM-D Score');

        %Set xlim and ylim
        xlim([0, max(10)]);
        ylim([min(0), max(35)]);


    elseif sg_ppt == 0 && remission_met_ppt == 0 && response_met == 1
        plot(0:(width(individual_HAMD) - 1), table2array(individual_HAMD), '-g*')

        % Add labels, titles, legends, etc. to the figure
        title(['Subject ', num2str(ID), ' Rp: ', num2str(response_week)]);
        xlabel('TMS Treatment Week');
        ylabel('HAM-D Score');

        %Set xlim and ylim
        xlim([0, max(10)]);
        ylim([min(0), max(35)]);

       

%         hold on;
% 
% % Plotting specific points in a different color based on the logical array
% plot(0:(width(individual_HAMD) - 1), HAMD_by_week(meetsCriteria), 'ro', 'MarkerSize', 8); % Plot red circles for specific points
% 
% hold off;
        
    else plot(0:(width(individual_HAMD) - 1), table2array(individual_HAMD), '-k*')

    % Add labels, titles, legends, etc. to the figure
    title(['Subject ', num2str(ID)]);
    xlabel('TMS Treatment Week');
    ylabel('HAM-D Score');

    %Set xlim and ylim
    xlim([0, max(10)]);
    ylim([min(0), max(35)]);

  

%     hold on;
% 
% % Plotting specific points in a different color based on the logical array
% plot(0:(width(individual_HAMD) - 1), HAMD_by_week(meetsCriteria), 'ro', 'MarkerSize', 8); % Plot red circles for specific points
% 
% hold off;

    end
end

%% Remission & Sudden Gain Statistics & Comparison
% Extract the instances of remission and sudden gain for each ppt
remission_met_1 = TESTS_by_week.remission_met_ppt(TESTS_by_week.remission_met_ppt ~= 0);
sg_ppt_1 = TESTS_by_week.sg_ppt(TESTS_by_week.sg_ppt ~= 0);

% HAMD_by_week_array_all = table2array(HAMD_by_week);

% Find ppt who were both a remitter and sudden gainer
rem_and_sg_instances = all(TESTS_by_week.sg_ppt == 1 & TESTS_by_week.remission_met_ppt == 1, 2);

% Calculate total of ppts who were both remitters and sudden gainers, find percent of total participants
sum_rem_and_sg = sum(rem_and_sg_instances);
rem_sg_percentage = (sum_rem_and_sg / 372) * 100;
rem_and_sg_indices = find(rem_and_sg_instances == 1);

% Calculate proportion of remitters that were also sudden gainers
sg_of_remitters = (sum(rem_and_sg_instances) / numel(remission_met_1)) * 100;

% Calculate proportion of sudden gainers that were also remitters
remitters_of_sg = (sum(rem_and_sg_instances) / numel(sg_ppt_1)) * 100;

% Display all previously calculated statistics
fprintf('%d participants were both remitters and sudden gainers\n', sum_rem_and_sg)
fprintf('%.2f%% of participants were both remitters and sudden gainers\n', rem_sg_percentage)
fprintf('%.2f%% of remitters were sudden gainers\n', sg_of_remitters)
fprintf('%.2f%% of sudden gainers were remitters\n', remitters_of_sg)

% Find HAMD means at baseline, final, f/u 1, f/u 2, and f/u 3 overall
meanbaseline = mean(TESTS_by_week_array(:, 1), 'omitmissing');
meanfinal = mean(TESTS_by_week_array(:, 7), 'omitmissing');
meanfu1 = mean(TESTS_by_week_array(:, 8), 'omitmissing');
meanfu2 = mean(TESTS_by_week_array(:, 9), 'omitmissing');
meanfu3 = mean(TESTS_by_week_array(:, 10), 'omitmissing');


% Find HAMD means at baseline, final, f/u 1, f/u 2, and f/u 3 among SG vs NSG
HAMDsg = TESTS_by_week_array(rows_with_ones_sg_reversed, 1:10);
sg_rem = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32);
nsg_rem = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32);
HAMDsg_rem = TESTS_by_week_array(sg_rem == 1, 1:10);
% meansg_rem_baseline = mean(HAMDsg_rem(:, 1), 'omitmissing');
% meannsg_rem_baseline = mean(HAMDnsg_rem(:, 1), 'omitmissing');
% meansg_rem_final = mean(HAMDsg_rem(:, 7), 'omitmissing');
% meannsg_rem_final = mean(HAMDnsg_rem(:, 7), 'omitmissing');
% meansg_rem_fu1 = mean(HAMDsg_rem(:, 8), 'omitmissing');
% meannsg_rem_fu1 = mean(HAMDnsg_rem(:, 8), 'omitmissing');
% meansg_rem_fu2 = mean(HAMDsg_rem(:, 9), 'omitmissing');
% meannsg_rem_fu2 = mean(HAMDnsg_rem(:, 9), 'omitmissing');
% meansg_rem_fu3 = mean(HAMDsg_rem(:, 10), 'omitmissing');
% meannsg_rem_fu3 = mean(HAMDnsg_rem(:, 10), 'omitmissing');
HAMDnsg_rem = TESTS_by_week_array(nsg_rem == 1, 1:10);
Nonsg = rows_with_ones_sg_reversed == 0;
HAMDnsg = TESTS_by_week_array(Nonsg, 1:10);
HAMDtherapy = TESTS_by_week_array(TESTS_by_week.PSYCHOTHER == 1, 1:10);
sum_therapy = sum(TESTS_by_week.PSYCHOTHER == 1);
sum_notherapy = sum(TESTS_by_week.PSYCHOTHER == 0);
HAMDnotherapy = TESTS_by_week_array(TESTS_by_week.PSYCHOTHER == 0, 1:10);
sg_therapy = TESTS_by_week.PSYCHOTHER  & TESTS_by_week.sg_ppt;
nsg_therapy = TESTS_by_week.PSYCHOTHER & ~TESTS_by_week.sg_ppt;
HAMDsg_therapy = TESTS_by_week_array(sg_therapy == 1, 1:10);
HAMDnsg_therapy = TESTS_by_week_array(nsg_therapy == 1, 1:10);
sum_sg_therapy = sum(sg_therapy);
sg_therapy_proportion = (sum_sg_therapy / sum_therapy) * 100;
sg_notherapy = ~TESTS_by_week.PSYCHOTHER  & TESTS_by_week.sg_ppt;
sum_sg_notherapy = sum(sg_notherapy);
sg_notherapy_proportion = (sum_sg_notherapy / sum_notherapy) * 100;
rem_therapy = TESTS_by_week.PSYCHOTHER & TESTS_by_week.remission_met_ppt;
nrem_therapy = TESTS_by_week.PSYCHOTHER & ~TESTS_by_week.remission_met_ppt;
rem_ntherapy = ~TESTS_by_week.PSYCHOTHER & TESTS_by_week.remission_met_ppt;
sum_rem_therapy = sum(rem_therapy);
sum_rem_ntherapy = sum(rem_ntherapy);
rem_of_therapy_prop = (sum_rem_therapy / sum_therapy) * 100;
therapy_ofrem_prop = (sum_rem_therapy / sum_remitted) * 100;
rem_of_notherapy_prop = (sum_rem_ntherapy /sum_notherapy) * 100;
%% Perform t-tests
% T-test: Baseline HAMD score comparison SG vs. NSG in therapy
[h_sg_nsg_baseline_therapy, p_sg_nsg_baseline_therapy, ci_sg_nsg_baseline_therapy, stats_sg_nsg_baseline_therapy] = ttest2(HAMDsg_therapy(:, 1), HAMDnsg_therapy(:, 1));
fprintf('p-value baseline sg vs. nsg among remitters: %.4f\n', p_sg_nsg_baseline_therapy);
fprintf('t-statistic baseline sg vs. nsg among remitters: %.4f\n', stats_sg_nsg_baseline_therapy.tstat);
fprintf('95%% Confidence Interval sg vs. nsg among remitters: [%.4f, %.4f]\n', ci_sg_nsg_baseline_therapy);

% T-test: Baseline HAMD score comparison therapy vs. no therapy
[h_baseline_therapy, p_baseline_therapy, ci_baseline_therapy, stats_baseline_therapy] = ttest2(HAMDtherapy(:, 1), HAMDnotherapy(:, 1));
fprintf('p-value baseline therapy vs. no therapy: %.4f\n', p_baseline_therapy);
fprintf('t-statistic baseline therapy vs. no therapy: %.4f\n', stats_baseline_therapy.tstat);
fprintf('95%% Confidence Interval baseline therapy vs. no therapy: [%.4f, %.4f]\n', ci_baseline_therapy);

% T-test: Final HAMD score therapy vs. no therapy
[h_final_therapy, p_final_therapy, ci_final_therapy, stats_final_therapy] = ttest2(HAMDtherapy(:, 7), HAMDnotherapy(:, 7));
fprintf('p-value baseline therapy vs. no therapy: %.4f\n', p_final_therapy);
fprintf('t-statistic baseline therapy vs. no therapy: %.4f\n', stats_final_therapy.tstat);
fprintf('95%% Confidence Interval baseline therapy vs. no therapy: [%.4f, %.4f]\n', ci_final_therapy);

% T-test: Baseline HAMD score comparison SG vs. NSG of remitters
[h_sg_nsg_baseline_rem, p_sg_nsg_baseline_rem, ci_sg_nsg_baseline_rem, stats_sg_nsg_baseline_rem] = ttest2(HAMDsg_rem(:, 1), HAMDnsg_rem(:, 1));
fprintf('p-value baseline sg vs. nsg among remitters: %.4f\n', p_sg_nsg_baseline_rem);
fprintf('t-statistic baseline sg vs. nsg among remitters: %.4f\n', stats_sg_nsg_baseline_rem.tstat);
fprintf('95%% Confidence Interval sg vs. nsg among remitters: [%.4f, %.4f]\n', ci_sg_nsg_baseline_rem);

% T-test: Final HAMD score comparison SG vs. NSG of remitters
[h_sg_nsg_final_rem, p_sg_nsg_final_rem, ci_sg_nsg_final_rem, stats_sg_nsg_final_rem] = ttest2(HAMDsg_rem(:, 7), HAMDnsg_rem(:, 7));

fprintf('p-value final sg vs. nsg among remitters: %.4f\n', p_sg_nsg_final_rem);
fprintf('t-statistic: %.4f\n', stats_sg_nsg_final_rem.tstat);
fprintf('95%% Confidence Interval: [%.4f, %.4f]\n', ci_sg_nsg_final_rem);

% T-test: Follow-Up 1 HAMD score comparison SG vs. NSG of remitters
[h_sg_nsg_fu1_rem, p_sg_nsg_fu1_rem, ci_sg_nsg_fu1_rem, stats_sg_nsg_fu1_rem] = ttest2(HAMDsg_rem(:, 8), HAMDnsg_rem(:, 8));
fprintf('p-value f/u 1 sg vs. nsg among remitters: %.4f\n', p_sg_nsg_fu1_rem);
fprintf('t-statistic f/u 1 sg vs. nsg among remitters: %.4f\n', stats_sg_nsg_fu1_rem.tstat);
fprintf('95%% Confidence Interval f/u 1 sg vs. nsg among remitters: [%.4f, %.4f]\n', ci_sg_nsg_fu1_rem);

% T-test: Follow-Up 2 HAMD score comparison SG vs. NSG of remitters
[h_sg_nsg_fu2_rem, p_sg_nsg_fu2_rem, ci_sg_nsg_fu2_rem, stats_sg_nsg_fu2_rem] = ttest2(HAMDsg_rem(:, 9), HAMDnsg_rem(:, 9));
fprintf('p-value f/u 2 sg vs. nsg among remitters: %.4f\n', p_sg_nsg_fu2_rem);
fprintf('t-statistic f/u 2 sg vs. nsg among remitters: %.4f\n', stats_sg_nsg_fu2_rem.tstat);
fprintf('95%% Confidence Interval f/u 2 sg vs. nsg among remitters: [%.4f, %.4f]\n', ci_sg_nsg_fu2_rem);

% T-test: Follow-Up 3 HAMD score comparison SG vs. NSG of remitters
[h_sg_nsg_fu3_rem, p_sg_nsg_fu3_rem, ci_sg_nsg_fu3_rem, stats_sg_nsg_fu3_rem] = ttest2(HAMDsg_rem(:, 10), HAMDnsg_rem(:, 10));
fprintf('p-value f/u 3 sg vs. nsg: %.4f\n', p_sg_nsg_fu3_rem);
fprintf('t-statistic f/u 3 sg vs. nsg: %.4f\n', stats_sg_nsg_fu3_rem.tstat);
fprintf('95%% Confidence Interval f/u 3 sg vs. nsg: [%.4f, %.4f]\n', ci_sg_nsg_fu3_rem);

% T-test: Baseline HAMD score comparison SG vs. NSG
[h_sg_nsg_baseline, p_sg_nsg_baseline, ci_sg_nsg_baseline, stats_sg_nsg_baseline] = ttest2(HAMDsg(:, 1), HAMDnsg(:, 1));
fprintf('p-value baseline sg vs. nsg: %.4f\n', p_sg_nsg_baseline);
fprintf('t-statistic baseline sg vs. nsg: %.4f\n', stats_sg_nsg_baseline.tstat);
fprintf('95%% Confidence Interval sg vs. nsg: [%.4f, %.4f]\n', ci_sg_nsg_baseline);

% T-test: Follow-Up 1 HAMD score comparison SG vs. NSG
[h_sg_nsg_fu1, p_sg_nsg_fu1, ci_sg_nsg_fu1, stats_sg_nsg_fu1] = ttest2(HAMDsg(:, 8), HAMDnsg(:, 8));
fprintf('p-value f/u 1 sg vs. nsg: %.4f\n', p_sg_nsg_fu1);
fprintf('t-statistic f/u 1 sg vs. nsg: %.4f\n', stats_sg_nsg_fu1.tstat);
fprintf('95%% Confidence Interval f/u 1 sg vs. nsg: [%.4f, %.4f]\n', ci_sg_nsg_fu1);

% T-test: Follow-Up 2 HAMD score comparison SG vs. NSG
[h_sg_nsg_fu2, p_sg_nsg_fu2, ci_sg_nsg_fu2, stats_sg_nsg_fu2] = ttest2(HAMDsg(:, 9), HAMDnsg(:, 9));
fprintf('p-value f/u 2 sg vs. nsg: %.4f\n', p_sg_nsg_fu2);
fprintf('t-statistic f/u 2 sg vs. nsg: %.4f\n', stats_sg_nsg_fu2.tstat);
fprintf('95%% Confidence Interval f/u 2 sg vs. nsg: [%.4f, %.4f]\n', ci_sg_nsg_fu2);

% T-test: Follow-Up 3 HAMD score comparison SG vs. NSG
[h_sg_nsg_fu3, p_sg_nsg_fu3, ci_sg_nsg_fu3, stats_sg_nsg_fu3] = ttest2(HAMDsg(:, 10), HAMDnsg(:, 10));
fprintf('p-value f/u 3 sg vs. nsg: %.4f\n', p_sg_nsg_fu3);
fprintf('t-statistic f/u 3 sg vs. nsg: %.4f\n', stats_sg_nsg_fu3.tstat);
fprintf('95%% Confidence Interval f/u 3 sg vs. nsg: [%.4f, %.4f]\n', ci_sg_nsg_fu3);

% T-test: Overall HAMD comparison Baseline vs. Final
[h_baseline_final, p_baseline_final, ci_baseline_final, stats_baseline_final] = ttest(TESTS_by_week_array(:, 1), TESTS_by_week_array(:, 7));
fprintf('p-value HAMD baseline vs. final: %.4f\n', p_baseline_final);
fprintf('t-statistic HAMD baseline vs. final: %.4f\n', stats_baseline_final.tstat);
fprintf('95%% Confidence Interval HAMD baseline vs. final: [%.4f, %.4f]\n', ci_baseline_final);

% T-test: Overall HAMD comparison Final vs. Follow-Up 1
[h_final_fu1, p_final_fu1, ci_final_fu1, stats_final_fu1] = ttest(TESTS_by_week_array(:, 7), TESTS_by_week_array(:, 8));
fprintf('p-value HAMD final vs. f/u 1: %.4f\n', p_final_fu1);
fprintf('t-statistic HAMD final vs. f/u 1: %.4f\n', stats_final_fu1.tstat);
fprintf('95%% Confidence Interval HAMD final vs. f/u 1: [%.4f, %.4f]\n', ci_final_fu1);

% T-test: Overall HAMD comparison Final vs. Follow-Up 2
[h_final_fu2, p_final_fu2, ci_final_fu2, stats_final_fu2] = ttest(TESTS_by_week_array(:, 7), TESTS_by_week_array(:, 9));
fprintf('p-value HAMD final vs. f/u 2: %.4f\n', p_final_fu2);
fprintf('t-statistic HAMD final vs. f/u 2: %.4f\n', stats_final_fu2.tstat);
fprintf('95%% Confidence Interval HAMD final vs. f/u 2: [%.4f, %.4f]\n', ci_final_fu2);

% T-test: Overall HAMD comparison Final vs. Follow-Up 3
[h_final_fu3, p_final_fu3, ci_final_fu3, stats_final_fu3] = ttest(TESTS_by_week_array(:, 7), TESTS_by_week_array(:, 10));
fprintf('p-value HAMD final vs. f/u 3: %.4f\n', p_final_fu3);
fprintf('t-statistic HAMD final vs. f/u 3: %.4f\n', stats_final_fu3.tstat);
fprintf('95%% Confidence Interval HAMD final vs. f/u 3: [%.4f, %.4f]\n', ci_final_fu3);
%% Find denominators for normalized SG histogram
% Initialize variable
num_remaining_ppt = zeros(size(sgavg_across_sessions));

% Loop through each session 1-18 to find # of remaining ppts at each session
for weekindex = 2:8
    num_remaining_ppt(weekindex) = sum(~isnan(TESTS_by_week_array(:, weekindex)));
end

figure

%% Plot quantity of sudden gains across sessions
   %plot(0:(width(individual_HAMD)), sgavg_across_sessions(1:19), '*')
   bar(1:(width(individual_HAMD)-2), sgavg_across_sessions(2:end), 'b');

        % Add labels, titles, legends, etc. to the figure
        title(['Sudden Gains Across Weeks of TMS']);
        xlabel('Week');
        ylabel('Number of Sudden Gains');

        %Set xlim and ylim
        xlim([0, max(8)]);
        ylim([min(0), max(32)]);

%     % If we have created a full set of subplots, create a new figure
%     if mod(personIndex, numSubplots) == 0
%         for i = 1:numSubplots
%             subplot(numRows, numCols, i);
%             figureHandles(i) = get(gca, 'Children');
%         end
%         % saveas(gcf, ['SubplotFigure', num2str(personIndex / numSubplots), '.png']);  % Save the subplot as a single figure
%         % close all;  % Close all figures to start a new subplot set
%     end
% end
% 
% % Save the last subplot set as a single figure
% for i = 1:numSubplots
%     subplot(numRows, numCols, i);
%     figureHandles(i) = get(gca, 'Children');
% end
% % saveas(gcf, ['SubplotFigure', num2str(personIndex / numSubplots), '.png']);
% % close all;  % Close all figures

%% Detect any instances of HAMD <= 10
% remission_crit1 = zeros(size(HAMD_by_week_array));
% [rowHAMD_under10, colHAMD_under10] = find(HAMD_by_week_array <= 10);
% remission_crit1_index = horzcat(rowHAMD_under10, colHAMD_under10);
% remission_crit1_indexsorted = sortrows(remission_crit1_index);
% [first_instance, sessionidx] = unique(remission_crit1_indexsorted(:, 1), 'stable');
% first_instance_session = remission_crit1_indexsorted(sessionidx, 2);
% remission_crit1_met_indices = horzcat(first_instance, first_instance_session);
%% Store the next value after first session where HAMD <= 10
% Initialize overall remission criteria 1 variable
% remission_crit1_overall = [];
% remission_crit1_post10_indices = zeros(length(remission_crit1_met_indices), 1);
% remission_crit1_overall_indices = zeros(length(remission_crit1_met_indices), 3);

% Loop through each participant with a HAMD <= 10 and store the indices of the next consecutive score
% for i = 1:length(remission_crit1_met_indices)
% 
%     remission_crit1_post10_indices(i) = remission_crit1_met_indices(i, 2) + 1;
% 
%     
% 
%     remission_crit1_overall_indices = horzcat(first_instance, first_instance_session, remission_crit1_post10_indices);
% end

% Initialize variable for storing the HAMD value at the next consecutive score after HAMD <= 10
% remission_crit1_second_value = zeros(size(remission_crit1_overall_indices, 1), 1);
% remission_crit1_overall_met = false(size(remission_crit1_overall_indices, 1), 1);
% remission_crit1_notmet_check_second_indices = zeros(size(remission_crit1_overall_indices, 1), 1);
% remission_crit1_all_met = false(size(HAMD_by_week_array, 1), 1);


% Loop through each participant with a HAMD <= 10 and store the next consecutive HAMD score
% for j = 1:length(remission_crit1_overall_indices)
% 
%     remission_crit1_second_value(j) = HAMD_by_week_array(remission_crit1_overall_indices(j, 1), remission_crit1_overall_indices(j, 3));
    
    % remission_crit1_data = horzcat(first_instance, first_instance_session, remission_crit1_post10_indices, remission_crit1_second_value);
    
    % Check if next consecutive HAMD score is <= 10
    % remission_crit1_overall_met(j) = remission_crit1_second_value(j) <= 10;
    % 
    % remission_crit1_data = horzcat(first_instance, first_instance_session, remission_crit1_post10_indices, remission_crit1_second_value, remission_crit1_overall_met);
    % 
    % if remission_crit1_data(j, 5) == 0
    %     remission_crit1_notmet_check_second_indices(j) = remission_crit1_overall_indices(j, 3) + 1;
    % 
    %     remission_crit1_data = horzcat(first_instance, first_instance_session, remission_crit1_post10_indices, remission_crit1_second_value, remission_crit1_overall_met, remission_crit1_notmet_check_second_indices);
    % 
    %    remission_crit1_notmet_check_second_indices_nonzero = remission_crit1_data(:, 6) ~= 0;
    % 
    %    remission_crit1_notmet_check_second_indices_nonzero_values = remission_crit1_data(remission_crit1_notmet_check_second_indices_nonzero, 6);
    % 
    %    remission_crit1_notmet_check_second_indices_nonzero_ppt = remission_crit1_data(remission_crit1_notmet_check_second_indices_nonzero, 1);
    % 
    %    remission_crit1_second_indices_ppt = horzcat(remission_crit1_notmet_check_second_indices_nonzero_ppt, remission_crit1_notmet_check_second_indices_nonzero_values);
    % 
    %     num_elements = size(remission_crit1_notmet_check_second_indices_nonzero_ppt, 1);
    % 
    %     HAMD_values_post_10 = cell(num_elements, 1);
    % 
    %     for k = 1:num_elements
    %          HAMD_values_post_10{k} = HAMD_by_week_array(remission_crit1_second_indices_ppt(k, 1), remission_crit1_notmet_check_second_indices_nonzero_values(k)+1:end);
    %          less_than_10 = cellfun(@(x) any(x <= 10 & [x(2:end) <= 10, false]), HAMD_values_post_10);
    %          remission_crit1_second_indices_ppt = horzcat(remission_crit1_notmet_check_second_indices_nonzero_ppt, remission_crit1_notmet_check_second_indices_nonzero_values, less_than_10);
    %     end
       
        % current_index = remission_crit1_data(j, 1);
        % 
        % % remission_crit1_all_met(remission_crit1_data(j, 1)) = remission_crit1_overall_met(remission_crit1_data(j, 1));
        % 
        % % Check if the current index exists in the smaller set
        % idx_43 = find(remission_crit1_second_indices_ppt(:, 1) == current_index);
        % 
        % if ~isempty(idx_43)
        %     % If the index is found in the smaller set, assign its value
        %     remission_crit1_all_met(j) = less_than_10(idx_43);
        % else
        %     % If the index is not found in the smaller set, assign value from the larger set
        %     remission_crit1_all_met(j) = remission_crit1_overall_met(j);
        % end
        % 

%     end
% end

% remission_crit1_second_value_vert = remission_crit1_second_value';
% remission_crit1_post10_indices = remission_crit1_post10_indices';

%remission_crit1_overall = HAMD_by_week_array(remission_crit1_post10_indices(i)) <= 10;




% remission_crit1 = all(HAMD_by_week_array, 2:end) <= 10)

% initialize first instant indices
% first_instance_under10 = zeros(240, 1);
% 
% % Get the number of people in the table
% TotalParticipants = size(HAMD_by_week_array, 1);
% 
% % Detect first instances of HAMD <= 10 for each participant
% for personindex = 1:TotalParticipants
%     indices_less_than_10 = find(HAMD_by_week_array(personindex, :) <= 10);
%     if ~isempty(indices_less_than_10)
%         first_instance_under10(personindex) = indices_less_than_10(1);
%     else
%         first_instance_under10(personindex) = 0;
%     end
% 
% end
% 
% rows_with_remission = first_instance_under10 ~= 0;
% for personindex = 1:TotalParticipants
%     if rows_with_remission(personindex) == 1
%         remission_crit1_weekindex = HAMD_by_week_array(:, first_instance_under10(personindex));
%     else
%         remission_crit1_weekindex = 0;
%     end
% end



% remission_crit2_weekindex = first_instance_under10(personindex, remission_crit1_weekindex + 1);

% remission_crit1_met = first_instance_under10(indices_less_than_10 ~= 0);


% %% Create logical variables for each scenario
% % Final & F/U 1 AMONG Remitters
% remission_sustained_sg_final_fu1_rem = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 35);
% counts_rem_sg_final_fu1_rem = sum(remission_sustained_sg_final_fu1_rem);
% remission_sustained_nsg_final_fu1_rem = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 35);
% counts_rem_nsg_final_fu1_rem = sum(remission_sustained_nsg_final_fu1_rem);
% remission_nonsustained_sg_final_fu1_rem = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 35);
% counts_nrem_sg_final_fu1_rem = sum(remission_nonsustained_sg_final_fu1_rem);
% remission_nonsustained_nsg_final_fu1_rem = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 35);
% counts_nrem_nsg_final_fu1_rem = sum(remission_nonsustained_nsg_final_fu1_rem);
% 
% % Manual Chi-squared
% rem_sg_array_final_fu1_rem = [counts_rem_sg_final_fu1_rem, counts_rem_nsg_final_fu1_rem; counts_nrem_sg_final_fu1_rem, counts_nrem_nsg_final_fu1_rem];
% 
% % Calculate expected frequencies
% row_totals_final_fu1_rem = sum(rem_sg_array_final_fu1_rem, 2);
% col_totals_final_fu1_rem = sum(rem_sg_array_final_fu1_rem, 1);
% total_final_fu1_rem = sum(row_totals_final_fu1_rem);
% expected_final_fu1_rem = (row_totals_final_fu1_rem * col_totals_final_fu1_rem) / total_final_fu1_rem;
% 
% % Calculate chi-squared test statistic
% chi2stat_final_fu1_rem = sum((rem_sg_array_final_fu1_rem(:) - expected_final_fu1_rem(:)).^2 ./ expected_final_fu1_rem(:));
% 
% % Degrees of freedom
% df = (size(rem_sg_array_final_fu1_rem, 1) - 1) * (size(rem_sg_array_final_fu1_rem, 2) - 1);
% 
% alpha = 0.05;
% 
% critical_value = chi2inv(1 - alpha, df);
% 
% p_value_final_fu1_rem = 1 - chi2cdf(chi2stat_final_fu1_rem, df);
% 
% disp(['Chi-squared test statistic for SG vs. NSG in Sustained Remission from final week to F/U 1 AMONG Remitters: ' num2str(chi2stat_final_fu1_rem)]);
% disp(['Degrees of freedom: ' num2str(df)]);
% disp(['Critical value: ' num2str(critical_value)]);
% disp(['P-value: ' num2str(p_value_final_fu1_rem)]);
% 
% OR_final_fu1_rem = (counts_rem_sg_final_fu1_rem * counts_nrem_nsg_final_fu1_rem) / (counts_rem_nsg_final_fu1_rem * counts_nrem_sg_final_fu1_rem);
% fprintf('Among remitters, sustained remitters from final timepoint to f/u 1 are %.2f times more likely to have experienced a sudden than to have not experienced one\n', OR_final_fu1_rem);
% 
% %% Create logical variables for each scenario
% % Final & F/U 2 AMONG Remitters
% remission_sustained_sg_final_fu2_rem = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 33) & TESTS_by_week_array(:, 35);
% counts_rem_sg_final_fu2_rem = sum(remission_sustained_sg_final_fu2_rem);
% remission_sustained_nsg_final_fu2_rem = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 33) & ~TESTS_by_week_array(:, 35);
% counts_rem_nsg_final_fu2_rem = sum(remission_sustained_nsg_final_fu2_rem);
% remission_nonsustained_sg_final_fu2_rem = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 33) & TESTS_by_week_array(:, 35);
% counts_nrem_sg_final_fu2_rem = sum(remission_nonsustained_sg_final_fu2_rem);
% remission_nonsustained_nsg_final_fu2_rem = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 33) & ~TESTS_by_week_array(:, 35);
% counts_nrem_nsg_final_fu2_rem = sum(remission_nonsustained_nsg_final_fu2_rem);
% 
% % Manual Chi-squared
% rem_sg_array_final_fu2_rem = [counts_rem_sg_final_fu2_rem, counts_rem_nsg_final_fu2_rem; counts_nrem_sg_final_fu2_rem, counts_nrem_nsg_final_fu2_rem];
% 
% % Calculate expected frequencies
% row_totals_final_fu2_rem = sum(rem_sg_array_final_fu2_rem, 2);
% col_totals_final_fu2_rem = sum(rem_sg_array_final_fu2_rem, 1);
% total_final_fu2_rem = sum(row_totals_final_fu2_rem);
% expected_final_fu2_rem = (row_totals_final_fu2_rem * col_totals_final_fu2_rem) / total_final_fu2_rem;
% 
% % Calculate chi-squared test statistic
% chi2stat_final_fu2_rem = sum((rem_sg_array_final_fu2_rem(:) - expected_final_fu2_rem(:)).^2 ./ expected_final_fu2_rem(:));
% 
% p_value_final_fu2_rem = 1 - chi2cdf(chi2stat_final_fu2_rem, df);
% 
% disp(['Chi-squared test statistic for SG vs. NSG in Sustained Remission from final week to F/U 2 AMONG Remitters: ' num2str(chi2stat_final_fu2_rem)]);
% disp(['Degrees of freedom: ' num2str(df)]);
% disp(['Critical value: ' num2str(critical_value)]);
% disp(['P-value: ' num2str(p_value_final_fu2_rem)]);
% 
% OR_final_fu2_rem = (counts_rem_sg_final_fu2_rem * counts_nrem_nsg_final_fu2_rem) / (counts_rem_nsg_final_fu2_rem * counts_nrem_sg_final_fu2_rem);
% fprintf('Among remitters, sustained remitters from final timepoint to f/u 2 are %.2f times more likely to have experienced a sudden than to have not experienced one\n', OR_final_fu2_rem);

%% Create logical variables for each scenario
% % Final & F/U 1
% remission_sustained_sg_final_fu1 = TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 34);
% counts_rem_sg_final_fu1 = sum(remission_sustained_sg_final_fu1);
% remission_sustained_nsg_final_fu1 = TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 34);
% counts_rem_nsg_final_fu1 = sum(remission_sustained_nsg_final_fu1);
% remission_nonsustained_sg_final_fu1 = ~TESTS_by_week_array(:, 31) & TESTS_by_week_array(:, 34);
% counts_nrem_sg_final_fu1 = sum(remission_nonsustained_sg_final_fu1);
% remission_nonsustained_nsg_final_fu1 = ~TESTS_by_week_array(:, 31) & ~TESTS_by_week_array(:, 34);
% counts_nrem_nsg_final_fu1 = sum(remission_nonsustained_nsg_final_fu1);
% 
% % Manual Chi-squared
% rem_sg_array_final_fu1 = [counts_rem_sg_final_fu1, counts_rem_nsg_final_fu1; counts_nrem_sg_final_fu1, counts_nrem_nsg_final_fu1];
% 
% % Calculate expected frequencies
% row_totals_final_fu1 = sum(rem_sg_array_final_fu1, 2);
% col_totals_final_fu1 = sum(rem_sg_array_final_fu1, 1);
% total_final_fu1 = sum(row_totals_final_fu1);
% expected_final_fu1 = (row_totals_final_fu1 * col_totals_final_fu1) / total_final_fu1;
% 
% % Calculate chi-squared test statistic
% chi2stat_final_fu1 = sum((rem_sg_array_final_fu1(:) - expected_final_fu1(:)).^2 ./ expected_final_fu1(:));
% 
% % Degrees of freedom
% df = (size(rem_sg_array_final_fu1, 1) - 1) * (size(rem_sg_array_final_fu1, 2) - 1);
% 
% alpha = 0.05;
% 
% critical_value = chi2inv(1 - alpha, df);
% 
% p_value_final_fu1 = 1 - chi2cdf(chi2stat_final_fu1, df);
% 
% disp(['Chi-squared test statistic for SG vs. NSG in Sustained Remission from final week to F/U 1: ' num2str(chi2stat_final_fu1)]);
% disp(['Degrees of freedom: ' num2str(df)]);
% disp(['Critical value: ' num2str(critical_value)]);
% disp(['P-value: ' num2str(p_value_final_fu1)]);
% 
% OR_final_fu1 = (counts_rem_sg_final_fu1 * counts_nrem_nsg_final_fu1) / (counts_rem_nsg_final_fu1 * counts_nrem_sg_final_fu1);
% fprintf('Sustained remitters are %.2f times more likely to have experienced a sudden than to have not experienced one\n', OR_final_fu1);
% 
% % Final & F/U 2
% remission_sustained_sg_final_fu2 = TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 34);
% counts_rem_sg_final_fu2 = sum(remission_sustained_sg_final_fu2);
% remission_sustained_nsg_final_fu2 = TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 34);
% counts_rem_nsg_final_fu2 = sum(remission_sustained_nsg_final_fu2);
% remission_nonsustained_sg_final_fu2 = ~TESTS_by_week_array(:, 32) & TESTS_by_week_array(:, 34);
% counts_nrem_sg_final_fu2 = sum(remission_nonsustained_sg_final_fu2);
% remission_nonsustained_nsg_final_fu2 = ~TESTS_by_week_array(:, 32) & ~TESTS_by_week_array(:, 34);
% counts_nrem_nsg_final_fu2 = sum(remission_nonsustained_nsg_final_fu2);
% 
% % Manual Chi-squared
% rem_sg_array_final_fu2 = [counts_rem_sg_final_fu2, counts_rem_nsg_final_fu2; counts_nrem_sg_final_fu2, counts_nrem_nsg_final_fu2];
% 
% % Calculate expected frequencies
% row_totals_final_fu2 = sum(rem_sg_array_final_fu2, 2);
% col_totals_final_fu2 = sum(rem_sg_array_final_fu2, 1);
% total_final_fu2 = sum(row_totals_final_fu2);
% expected_final_fu2 = (row_totals_final_fu2 * col_totals_final_fu2) / total_final_fu2;
% 
% % Calculate chi-squared test statistic
% chi2stat_final_fu2 = sum((rem_sg_array_final_fu2(:) - expected_final_fu2(:)).^2 ./ expected_final_fu2(:));
% 
% p_value_final_fu2 = 1 - chi2cdf(chi2stat_final_fu2, df);
% 
% disp(['Chi-squared test statistic for SG vs. NSG in Sustained Remission from final week to F/U 2: ' num2str(chi2stat_final_fu2)]);
% disp(['Degrees of freedom: ' num2str(df)]);
% disp(['Critical value: ' num2str(critical_value)]);
% disp(['P-value: ' num2str(p_value_final_fu2)]);
% 
% OR_final_fu2 = (counts_rem_sg_final_fu2 * counts_nrem_nsg_final_fu2) / (counts_rem_nsg_final_fu2 * counts_nrem_sg_final_fu2);
% fprintf('Sustained remitters are %.2f times more likely to have experienced a sudden than to have not experienced one\n', OR_final_fu2);
% 
% % Final & F/U 3
% remission_sustained_sg_final_fu3 = TESTS_by_week_array(:, 33) & TESTS_by_week_array(:, 34);
% counts_rem_sg_final_fu3 = sum(remission_sustained_sg_final_fu3);
% remission_sustained_nsg_final_fu3 = TESTS_by_week_array(:, 33) & ~TESTS_by_week_array(:, 34);
% counts_rem_nsg_final_fu3 = sum(remission_sustained_nsg_final_fu3);
% remission_nonsustained_sg_final_fu3 = ~TESTS_by_week_array(:, 33) & TESTS_by_week_array(:, 34);
% counts_nrem_sg_final_fu3 = sum(remission_nonsustained_sg_final_fu3);
% remission_nonsustained_nsg_final_fu3 = ~TESTS_by_week_array(:, 33) & ~TESTS_by_week_array(:, 34);
% counts_nrem_nsg_final_fu3 = sum(remission_nonsustained_nsg_final_fu3);
% 
% % Manual Chi-squared
% rem_sg_array_final_fu3 = [counts_rem_sg_final_fu3, counts_rem_nsg_final_fu3; counts_nrem_sg_final_fu3, counts_nrem_nsg_final_fu3];
% 
% % Calculate expected frequencies
% row_totals_final_fu3 = sum(rem_sg_array_final_fu3, 2);
% col_totals_final_fu3 = sum(rem_sg_array_final_fu3, 1);
% total_final_fu3 = sum(row_totals_final_fu3);
% expected_final_fu3 = (row_totals_final_fu3 * col_totals_final_fu3) / total_final_fu3;
% 
% % Calculate chi-squared test statistic
% chi2stat_final_fu3 = sum((rem_sg_array_final_fu3(:) - expected_final_fu3(:)).^2 ./ expected_final_fu3(:));
% 
% p_value_final_fu3 = 1 - chi2cdf(chi2stat_final_fu3, df);
% 
% disp(['Chi-squared test statistic for SG vs. NSG in Sustained Remission from final week to F/U 3: ' num2str(chi2stat_final_fu3)]);
% disp(['Degrees of freedom: ' num2str(df)]);
% disp(['Critical value: ' num2str(critical_value)]);
% disp(['P-value: ' num2str(p_value_final_fu3)]);
% 
% OR_final_fu3 = (counts_rem_sg_final_fu3 * counts_nrem_nsg_final_fu3) / (counts_rem_nsg_final_fu3 * counts_nrem_sg_final_fu3);
% fprintf('Sustained remitters are %.2f times more likely to have experienced a sudden than to have not experienced one\n', OR_final_fu3);
% 
% %% Sustained Response Chi-Square Analysis
% 
% % Create logical variables for each scenario
% 
% % Note
%    % TESTS_by_week_array(:, 34) is rows_with_ones_sg_reversed
%    % TESTS_by_week_array(:, 31-33) is remission_sustained_overall; each column
%    % refers to sustained remission at time points FU1, FU2, FU3
% % F/U 1
% response_sustained_sg_final_fu1 = TESTS_by_week_array(:, 35) & TESTS_by_week_array(:, 34); 
% counts_res_sg_final_fu1 = sum(response_sustained_sg_final_fu1);
% response_sustained_nsg_final_fu1 = TESTS_by_week_array(:, 35) & ~TESTS_by_week_array(:, 34);
% counts_res_nsg_final_fu1 = sum(response_sustained_nsg_final_fu1);
% response_nonsustained_sg_final_fu1 = ~TESTS_by_week_array(:, 35) & TESTS_by_week_array(:, 34);
% counts_nres_sg_final_fu1 = sum(response_nonsustained_sg_final_fu1);
% response_nonsustained_nsg_final_fu1 = ~TESTS_by_week_array(:, 35) & ~TESTS_by_week_array(:, 34);
% counts_nres_nsg_final_fu1 = sum(response_nonsustained_nsg_final_fu1);
% 
% % Manual Chi-squared
% res_sg_array_fu1 = [counts_res_sg_final_fu1, counts_res_nsg_final_fu1; counts_nres_sg_final_fu1, counts_nres_nsg_final_fu1];
% 
% % Calculate expected frequencies
% res_row_totals_fu1 = sum(res_sg_array_fu1, 2);
% res_col_totals_fu1 = sum(res_sg_array_fu1, 1);
% res_total_fu1 = sum(res_row_totals_fu1);
% res_expected_fu1 = (res_row_totals_fu1 * res_col_totals_fu1) / res_total_fu1;
% 
% % Calculate chi-squared test statistic
% res_chi2stat_fu1 = sum((res_sg_array_fu1(:) - res_expected_fu1(:)).^2 ./ res_expected_fu1(:));
% 
% % Degrees of freedom
% df = (size(res_sg_array_fu1, 1) - 1) * (size(res_sg_array_fu1, 2) - 1);
% 
% alpha = 0.05;
% 
% critical_value = chi2inv(1 - alpha, df);
% 
% res_p_value_fu1  = 1 - chi2cdf(res_chi2stat_fu1, df); % response p value
% 
% disp(['Chi-squared test statistic for SG vs. NSG in Sustained Response from final week to F/U 1: ' num2str(res_chi2stat_fu1)]);
% disp(['Degrees of freedom: ' num2str(df)]);
% disp(['Critical value: ' num2str(critical_value)]);
% disp(['P-value: ' num2str(res_p_value_fu1)]);
% 
% res_OR_fu1 = (counts_res_sg_final_fu1 * counts_nres_nsg_final_fu1) / (counts_res_nsg_final_fu1 * counts_nres_sg_final_fu1);
% 
% % Final & F/U 2
% response_sustained_sg_final_fu2 = TESTS_by_week_array(:, 36) & TESTS_by_week_array(:, 34);
% counts_res_sg_final_fu2 = sum(response_sustained_sg_final_fu2);
% response_sustained_nsg_final_fu2 = TESTS_by_week_array(:, 36) & ~TESTS_by_week_array(:, 34);
% counts_res_nsg_final_fu2 = sum(response_sustained_nsg_final_fu2);
% response_nonsustained_sg_final_fu2 = ~TESTS_by_week_array(:, 36) & TESTS_by_week_array(:, 34);
% counts_nres_sg_final_fu2 = sum(response_nonsustained_sg_final_fu2);
% response_nonsustained_nsg_final_fu2 = ~TESTS_by_week_array(:, 36) & ~TESTS_by_week_array(:, 34);
% counts_nres_nsg_final_fu2 = sum(response_nonsustained_nsg_final_fu2);
% 
% % Manual Chi-squared
% res_sg_array_fu2 = [counts_res_sg_final_fu2, counts_res_nsg_final_fu2; counts_nres_sg_final_fu2, counts_nres_nsg_final_fu2];
% 
% % Calculate expected frequencies
% res_row_totals_fu2 = sum(res_sg_array_fu2, 2);
% res_col_totals_fu2 = sum(res_sg_array_fu2, 1);
% res_total_fu2 = sum(res_row_totals_fu2);
% res_expected_fu2 = (res_row_totals_fu2 * res_col_totals_fu2) / res_total_fu2;
% 
% % Calculate chi-squared test statistic
% res_chi2stat_fu2 = sum((res_sg_array_fu2(:) - res_expected_fu2(:)).^2 ./ res_expected_fu2(:));
% 
% res_p_value_fu2 = 1 - chi2cdf(res_chi2stat_fu2, df);
% 
% disp(['Chi-squared test statistic for SG vs. NSG in Sustained Remission from final week to F/U 2: ' num2str(res_chi2stat_fu2)]);
% disp(['Degrees of freedom: ' num2str(df)]);
% disp(['Critical value: ' num2str(critical_value)]);
% disp(['P-value: ' num2str(res_p_value_fu2)]);
% 
% res_OR_fu2 = (counts_res_sg_final_fu2 * counts_nres_nsg_final_fu2) / (counts_res_nsg_final_fu2 * counts_nres_sg_final_fu2);
% 
% % Final & F/U 3
% response_sustained_sg_final_fu3 = TESTS_by_week_array(:, 37) & TESTS_by_week_array(:, 34);
% counts_res_sg_final_fu3 = sum(response_sustained_sg_final_fu3);
% response_sustained_nsg_final_fu3 = TESTS_by_week_array(:, 37) & ~TESTS_by_week_array(:, 34);
% counts_res_nsg_final_fu3 = sum(response_sustained_nsg_final_fu3);
% response_nonsustained_sg_final_fu3 = ~TESTS_by_week_array(:, 37) & TESTS_by_week_array(:, 34);
% counts_nres_sg_final_fu3 = sum(response_nonsustained_sg_final_fu3);
% response_nonsustained_nsg_final_fu3 = ~TESTS_by_week_array(:, 37) & ~TESTS_by_week_array(:, 34);
% counts_nres_nsg_final_fu3 = sum(response_nonsustained_nsg_final_fu3);
% 
% % Manual Chi-squared
% res_sg_array_fu3 = [counts_res_sg_final_fu3, counts_res_nsg_final_fu3; counts_nres_sg_final_fu3, counts_nres_nsg_final_fu3];
% 
% % Calculate expected frequencies
% res_row_totals_fu3 = sum(res_sg_array_fu3, 2);
% res_col_totals_fu3 = sum(res_sg_array_fu3, 1);
% res_total_fu3 = sum(res_row_totals_fu3);
% res_expected_fu3 = (res_row_totals_fu3  * res_col_totals_fu3) / res_total_fu3;
% 
% % Calculate chi-squared test statistic
% res_chi2stat_fu3 = sum((res_sg_array_fu3(:) - res_expected_fu3(:)).^2 ./ res_expected_fu3 (:));
% 
% res_p_value_fu3 = 1 - chi2cdf(res_chi2stat_fu3, df);
% 
% disp(['Chi-squared test statistic for SG vs. NSG in Sustained Remission from final week to F/U 3: ' num2str(res_chi2stat_fu3)]);
% disp(['Degrees of freedom: ' num2str(df)]);
% disp(['Critical value: ' num2str(critical_value)]);
% disp(['P-value: ' num2str(res_p_value_fu3)]);
% 
% res_OR_fu3 = (counts_res_sg_final_fu3 * counts_nres_nsg_final_fu3) / (counts_res_nsg_final_fu3 * counts_nres_sg_final_fu3);
% 
% % Display response results
% fprintf('Sustained responders 1 week post treatment are %.2f times more likely to have experienced a sudden than to have not experienced one (P value: %.2f)\n', res_OR_fu1, res_p_value_fu1);
% fprintf('Sustained responders 4 weeks post treatment are %.2f times more likely to have experienced a sudden than to have not experienced one (P value: %.2f)\n', res_OR_fu2, res_p_value_fu2);
% fprintf('Sustained responders 12 week post treatment are %.2f times more likely to have experienced a sudden than to have not experienced one (P value: %.2f)\n', res_OR_fu3, res_p_value_fu3);